//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Index.Dal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IndexEntities : DbContext
    {
        public IndexEntities()
            : base("name=IndexEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 1500000;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("IndexEntities", "fn_mgr_split_string")]
        public virtual IQueryable<fn_mgr_split_string_Result> fn_mgr_split_string(string delimited, string delimiter)
        {
            var delimitedParameter = delimited != null ?
                new ObjectParameter("delimited", delimited) :
                new ObjectParameter("delimited", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_mgr_split_string_Result>("[IndexEntities].[fn_mgr_split_string](@delimited, @delimiter)", delimitedParameter, delimiterParameter);
        }
    
        public virtual int sp_mgr_cargar_aduana(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_aduana", result);
        }
    
        public virtual int sp_mgr_cargar_cliente(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_cliente", result);
        }
    
        public virtual int sp_mgr_cargar_detalle(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_detalle", result);
        }
    
        public virtual int sp_mgr_cargar_documento(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_documento", result);
        }
    
        public virtual int sp_mgr_cargar_formula(Nullable<int> idProducto, Nullable<int> idMaintem, ObjectParameter result)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idMaintemParameter = idMaintem.HasValue ?
                new ObjectParameter("IdMaintem", idMaintem) :
                new ObjectParameter("IdMaintem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_formula", idProductoParameter, idMaintemParameter, result);
        }
    
        public virtual int sp_mgr_cargar_garantia(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_garantia", result);
        }
    
        public virtual int sp_mgr_cargar_mp(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_mp", result);
        }
    
        public virtual int sp_mgr_cargar_pais(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_pais", result);
        }
    
        public virtual int sp_mgr_cargar_partida(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_partida", result);
        }
    
        public virtual int sp_mgr_cargar_proveedor(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_proveedor", result);
        }
    
        public virtual int sp_mgr_cargar_transaccion(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_transaccion", result);
        }
    
        public virtual int sp_mgr_cargar_um(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cargar_um", result);
        }
    
        public virtual int sp_mgr_cliente_telefono(Nullable<int> idPerson, string telefono, string tipoTel, string delimitador)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var tipoTelParameter = tipoTel != null ?
                new ObjectParameter("TipoTel", tipoTel) :
                new ObjectParameter("TipoTel", typeof(string));
    
            var delimitadorParameter = delimitador != null ?
                new ObjectParameter("Delimitador", delimitador) :
                new ObjectParameter("Delimitador", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_cliente_telefono", idPersonParameter, telefonoParameter, tipoTelParameter, delimitadorParameter);
        }
    
        public virtual int sp_mgr_correccion_datos(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_correccion_datos", result);
        }
    
        public virtual int sp_mgr_crear_cliente(Nullable<int> idCliente, Nullable<bool> constancia, ObjectParameter idPersonOut, ObjectParameter idAccntOut)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var constanciaParameter = constancia.HasValue ?
                new ObjectParameter("Constancia", constancia) :
                new ObjectParameter("Constancia", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_crear_cliente", idClienteParameter, constanciaParameter, idPersonOut, idAccntOut);
        }
    
        public virtual int sp_mgr_crear_error(string mensaje, Nullable<int> idRef, Nullable<bool> sqlErr, ObjectParameter id)
        {
            var mensajeParameter = mensaje != null ?
                new ObjectParameter("Mensaje", mensaje) :
                new ObjectParameter("Mensaje", typeof(string));
    
            var idRefParameter = idRef.HasValue ?
                new ObjectParameter("IdRef", idRef) :
                new ObjectParameter("IdRef", typeof(int));
    
            var sqlErrParameter = sqlErr.HasValue ?
                new ObjectParameter("SqlErr", sqlErr) :
                new ObjectParameter("SqlErr", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_crear_error", mensajeParameter, idRefParameter, sqlErrParameter, id);
        }
    
        public virtual int sp_mgr_crear_proveedor(Nullable<int> idProveedor, Nullable<bool> destino, ObjectParameter idPersonOut)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var destinoParameter = destino.HasValue ?
                new ObjectParameter("Destino", destino) :
                new ObjectParameter("Destino", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_crear_proveedor", idProveedorParameter, destinoParameter, idPersonOut);
        }
    
        public virtual int sp_mgr_insertar_telefono(Nullable<int> idPerson, string telefono, string tipoTel, ObjectParameter inserto)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var tipoTelParameter = tipoTel != null ?
                new ObjectParameter("TipoTel", tipoTel) :
                new ObjectParameter("TipoTel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_insertar_telefono", idPersonParameter, telefonoParameter, tipoTelParameter, inserto);
        }
    
        public virtual int sp_mgr_resolucion(Nullable<int> idCliente, Nullable<int> idPerson, Nullable<int> idAccount, ObjectParameter result)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_resolucion", idClienteParameter, idPersonParameter, idAccountParameter, result);
        }
    
        public virtual int sp_mgr_split_name(string pNombre, ObjectParameter firstName, ObjectParameter lastName)
        {
            var pNombreParameter = pNombre != null ?
                new ObjectParameter("pNombre", pNombre) :
                new ObjectParameter("pNombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_split_name", pNombreParameter, firstName, lastName);
        }
    
        public virtual int sp_mgr_transmision(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_transmision", result);
        }
    
        public virtual int sp_mgr_transmision_log(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_mgr_transmision_log", result);
        }
    
        public virtual ObjectResult<sp_MobileLogin_Result> sp_MobileLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MobileLogin_Result>("sp_MobileLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_MobilePasswordReset(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MobilePasswordReset", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_SiteLogin_Result> sp_SiteLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SiteLogin_Result>("sp_SiteLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_SitePasswordChange(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SitePasswordChange", userNameParameter, passwordParameter);
        }
    
        public virtual int spd_Account(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Account", idParameter);
        }
    
        public virtual int spd_AccountingItemUnassing(Nullable<int> idResolution, Nullable<int> idAccountingItem)
        {
            var idResolutionParameter = idResolution.HasValue ?
                new ObjectParameter("IdResolution", idResolution) :
                new ObjectParameter("IdResolution", typeof(int));
    
            var idAccountingItemParameter = idAccountingItem.HasValue ?
                new ObjectParameter("IdAccountingItem", idAccountingItem) :
                new ObjectParameter("IdAccountingItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_AccountingItemUnassing", idResolutionParameter, idAccountingItemParameter);
        }
    
        public virtual int spd_Address(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Address", idParameter);
        }
    
        public virtual int spd_Adjustment(Nullable<int> idFileItemDischarge)
        {
            var idFileItemDischargeParameter = idFileItemDischarge.HasValue ?
                new ObjectParameter("IdFileItemDischarge", idFileItemDischarge) :
                new ObjectParameter("IdFileItemDischarge", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Adjustment", idFileItemDischargeParameter);
        }
    
        public virtual int spd_AssignRoleToPremission(Nullable<int> idRole, Nullable<int> idPremission)
        {
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            var idPremissionParameter = idPremission.HasValue ?
                new ObjectParameter("IdPremission", idPremission) :
                new ObjectParameter("IdPremission", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_AssignRoleToPremission", idRoleParameter, idPremissionParameter);
        }
    
        public virtual int spd_AssignUserToRole(string userName, Nullable<int> idRole)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_AssignUserToRole", userNameParameter, idRoleParameter);
        }
    
        public virtual int spd_Cellar(Nullable<int> idCellar)
        {
            var idCellarParameter = idCellar.HasValue ?
                new ObjectParameter("IdCellar", idCellar) :
                new ObjectParameter("IdCellar", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Cellar", idCellarParameter);
        }
    
        public virtual int spd_Country(Nullable<int> idCountry)
        {
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Country", idCountryParameter);
        }
    
        public virtual int spd_Currency(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Currency", idParameter);
        }
    
        public virtual int spd_Customer(Nullable<int> idCustomer)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Customer", idCustomerParameter);
        }
    
        public virtual int spd_CustomerAccount(Nullable<int> idCustomer, Nullable<int> idAccount)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_CustomerAccount", idCustomerParameter, idAccountParameter);
        }
    
        public virtual int spd_CustomerUser(Nullable<int> idCustomer)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_CustomerUser", idCustomerParameter);
        }
    
        public virtual int spd_CustomerUser2(Nullable<int> idCustomer, string userName)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_CustomerUser2", idCustomerParameter, userNameParameter);
        }
    
        public virtual int spd_Customs(Nullable<int> idCustom)
        {
            var idCustomParameter = idCustom.HasValue ?
                new ObjectParameter("IdCustom", idCustom) :
                new ObjectParameter("IdCustom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Customs", idCustomParameter);
        }
    
        public virtual int spd_Email(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Email", idParameter);
        }
    
        public virtual int spd_Enterprise(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Enterprise", idParameter);
        }
    
        public virtual int spd_ErrorOpaDetail(Nullable<int> idOpaHeader)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_ErrorOpaDetail", idOpaHeaderParameter);
        }
    
        public virtual int spd_FileAttached(Nullable<int> idFileAttached)
        {
            var idFileAttachedParameter = idFileAttached.HasValue ?
                new ObjectParameter("IdFileAttached", idFileAttached) :
                new ObjectParameter("IdFileAttached", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileAttached", idFileAttachedParameter);
        }
    
        public virtual int spd_FileAttachedDisplay(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileAttachedDisplay", idParameter);
        }
    
        public virtual int spd_FileDetail(Nullable<int> idFileDetail)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileDetail", idFileDetailParameter);
        }
    
        public virtual int spd_FileDetailDisplay(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileDetailDisplay", idParameter);
        }
    
        public virtual int spd_FileHeader(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileHeader", idParameter);
        }
    
        public virtual int spd_FileInfo(Nullable<int> idFileInfo)
        {
            var idFileInfoParameter = idFileInfo.HasValue ?
                new ObjectParameter("IdFileInfo", idFileInfo) :
                new ObjectParameter("IdFileInfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileInfo", idFileInfoParameter);
        }
    
        public virtual int spd_FileInfoConfig(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileInfoConfig", idFileInfoConfigParameter);
        }
    
        public virtual int spd_FileItemDischarge(Nullable<int> idFileDetailSubstrac, Nullable<int> idFileDetailStock)
        {
            var idFileDetailSubstracParameter = idFileDetailSubstrac.HasValue ?
                new ObjectParameter("IdFileDetailSubstrac", idFileDetailSubstrac) :
                new ObjectParameter("IdFileDetailSubstrac", typeof(int));
    
            var idFileDetailStockParameter = idFileDetailStock.HasValue ?
                new ObjectParameter("IdFileDetailStock", idFileDetailStock) :
                new ObjectParameter("IdFileDetailStock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileItemDischarge", idFileDetailSubstracParameter, idFileDetailStockParameter);
        }
    
        public virtual int spd_FileItemDischargeTransmited(Nullable<int> idFileItemDischarge)
        {
            var idFileItemDischargeParameter = idFileItemDischarge.HasValue ?
                new ObjectParameter("IdFileItemDischarge", idFileItemDischarge) :
                new ObjectParameter("IdFileItemDischarge", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileItemDischargeTransmited", idFileItemDischargeParameter);
        }
    
        public virtual int spd_FileMasterDisplay(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_FileMasterDisplay", idParameter);
        }
    
        public virtual int spd_Formula(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Formula", idParameter);
        }
    
        public virtual int spd_Item(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Item", idParameter);
        }
    
        public virtual int spd_OpaDetail(Nullable<int> idOpaHeader)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_OpaDetail", idOpaHeaderParameter);
        }
    
        public virtual int spd_OpaDetailItem(Nullable<int> idOpaDetail)
        {
            var idOpaDetailParameter = idOpaDetail.HasValue ?
                new ObjectParameter("IdOpaDetail", idOpaDetail) :
                new ObjectParameter("IdOpaDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_OpaDetailItem", idOpaDetailParameter);
        }
    
        public virtual int spd_Person(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Person", idParameter);
        }
    
        public virtual int spd_Phone(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Phone", idParameter);
        }
    
        public virtual int spd_Resolution(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Resolution", idParameter);
        }
    
        public virtual int spd_role(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_role", idParameter);
        }
    
        public virtual int spd_Supplier(Nullable<int> idPerson)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Supplier", idPersonParameter);
        }
    
        public virtual int spd_UnitMeasurement(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_UnitMeasurement", idParameter);
        }
    
        public virtual int spd_user(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_user", userNameParameter);
        }
    
        public virtual int spd_Warranty(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spd_Warranty", idParameter);
        }
    
        public virtual ObjectResult<spg_Account_Result> spg_Account(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Account_Result>("spg_Account", idParameter);
        }
    
        public virtual ObjectResult<spg_AccountByCustomer_Result> spg_AccountByCustomer(Nullable<int> idCustomer)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_AccountByCustomer_Result>("spg_AccountByCustomer", idCustomerParameter);
        }
    
        public virtual ObjectResult<spg_AccountingItems_Result> spg_AccountingItems(Nullable<int> idAccountingItem, Nullable<int> idResolution)
        {
            var idAccountingItemParameter = idAccountingItem.HasValue ?
                new ObjectParameter("IdAccountingItem", idAccountingItem) :
                new ObjectParameter("IdAccountingItem", typeof(int));
    
            var idResolutionParameter = idResolution.HasValue ?
                new ObjectParameter("IdResolution", idResolution) :
                new ObjectParameter("IdResolution", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_AccountingItems_Result>("spg_AccountingItems", idAccountingItemParameter, idResolutionParameter);
        }
    
        public virtual ObjectResult<spg_AccountingItemTree_Result> spg_AccountingItemTree(Nullable<int> idResolution)
        {
            var idResolutionParameter = idResolution.HasValue ?
                new ObjectParameter("IdResolution", idResolution) :
                new ObjectParameter("IdResolution", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_AccountingItemTree_Result>("spg_AccountingItemTree", idResolutionParameter);
        }
    
        public virtual ObjectResult<spg_Address_Result> spg_Address(Nullable<int> idPerson, Nullable<int> idAddressType)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idAddressTypeParameter = idAddressType.HasValue ?
                new ObjectParameter("IdAddressType", idAddressType) :
                new ObjectParameter("IdAddressType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Address_Result>("spg_Address", idPersonParameter, idAddressTypeParameter);
        }
    
        public virtual ObjectResult<spg_AddressType_Result> spg_AddressType(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_AddressType_Result>("spg_AddressType", idParameter);
        }
    
        public virtual ObjectResult<spg_Adjustment_Result> spg_Adjustment(Nullable<int> idFileDetailStock, Nullable<int> idFileDetailSubstract)
        {
            var idFileDetailStockParameter = idFileDetailStock.HasValue ?
                new ObjectParameter("IdFileDetailStock", idFileDetailStock) :
                new ObjectParameter("IdFileDetailStock", typeof(int));
    
            var idFileDetailSubstractParameter = idFileDetailSubstract.HasValue ?
                new ObjectParameter("IdFileDetailSubstract", idFileDetailSubstract) :
                new ObjectParameter("IdFileDetailSubstract", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Adjustment_Result>("spg_Adjustment", idFileDetailStockParameter, idFileDetailSubstractParameter);
        }
    
        public virtual ObjectResult<spg_Cellar_Result> spg_Cellar(Nullable<int> idCellar)
        {
            var idCellarParameter = idCellar.HasValue ?
                new ObjectParameter("IdCellar", idCellar) :
                new ObjectParameter("IdCellar", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Cellar_Result>("spg_Cellar", idCellarParameter);
        }
    
        public virtual ObjectResult<spg_Country_Result> spg_Country(Nullable<int> idCountry)
        {
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Country_Result>("spg_Country", idCountryParameter);
        }
    
        public virtual ObjectResult<spg_Currency_Result> spg_Currency(Nullable<int> id, Nullable<int> idCountry)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Currency_Result>("spg_Currency", idParameter, idCountryParameter);
        }
    
        public virtual ObjectResult<spg_Customer_Result> spg_Customer(Nullable<int> idCustomer, Nullable<bool> isEnterPrise)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var isEnterPriseParameter = isEnterPrise.HasValue ?
                new ObjectParameter("IsEnterPrise", isEnterPrise) :
                new ObjectParameter("IsEnterPrise", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Customer_Result>("spg_Customer", idCustomerParameter, isEnterPriseParameter);
        }
    
        public virtual ObjectResult<spg_CustomerAccount_Result> spg_CustomerAccount(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_CustomerAccount_Result>("spg_CustomerAccount", userNameParameter);
        }
    
        public virtual ObjectResult<spg_CustomerAccountData_Result> spg_CustomerAccountData(Nullable<int> idCustomer, Nullable<int> idAccount)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_CustomerAccountData_Result>("spg_CustomerAccountData", idCustomerParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<spg_CustomerAccountToAssing_Result> spg_CustomerAccountToAssing(Nullable<int> idCustomer)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_CustomerAccountToAssing_Result>("spg_CustomerAccountToAssing", idCustomerParameter);
        }
    
        public virtual ObjectResult<spg_CustomerAssignedByUser_Result> spg_CustomerAssignedByUser(string userName, Nullable<int> idAccount)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_CustomerAssignedByUser_Result>("spg_CustomerAssignedByUser", userNameParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<spg_CustomerByUser_Result> spg_CustomerByUser(Nullable<int> idCustomer, string userName)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_CustomerByUser_Result>("spg_CustomerByUser", idCustomerParameter, userNameParameter);
        }
    
        public virtual ObjectResult<spg_CustomerToAssignUser_Result> spg_CustomerToAssignUser(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_CustomerToAssignUser_Result>("spg_CustomerToAssignUser", userNameParameter);
        }
    
        public virtual int spg_CustomerType(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spg_CustomerType", idParameter);
        }
    
        public virtual ObjectResult<spg_Customs_Result> spg_Customs(Nullable<int> id, Nullable<int> idCountry)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Customs_Result>("spg_Customs", idParameter, idCountryParameter);
        }
    
        public virtual ObjectResult<spg_DashboardCustomer_Result> spg_DashboardCustomer(Nullable<int> idCustomer)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DashboardCustomer_Result>("spg_DashboardCustomer", idCustomerParameter);
        }
    
        public virtual ObjectResult<spg_DashboardExpired_Result> spg_DashboardExpired(Nullable<int> idCustomer, Nullable<int> idAccount)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DashboardExpired_Result>("spg_DashboardExpired", idCustomerParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<spg_DashboardExpiredDetail_Result> spg_DashboardExpiredDetail(Nullable<int> idCustomer, Nullable<int> idAccount)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DashboardExpiredDetail_Result>("spg_DashboardExpiredDetail", idCustomerParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<spg_DashboardTransmited_Result> spg_DashboardTransmited(Nullable<int> idCustomer, Nullable<int> idAccount)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DashboardTransmited_Result>("spg_DashboardTransmited", idCustomerParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<spg_DashboardTransmitedDetail_Result> spg_DashboardTransmitedDetail(Nullable<int> idCustomer, Nullable<int> idAccount)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DashboardTransmitedDetail_Result>("spg_DashboardTransmitedDetail", idCustomerParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<spg_DetailResponse_Result> spg_DetailResponse(Nullable<int> idOpaDetail)
        {
            var idOpaDetailParameter = idOpaDetail.HasValue ?
                new ObjectParameter("IdOpaDetail", idOpaDetail) :
                new ObjectParameter("IdOpaDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DetailResponse_Result>("spg_DetailResponse", idOpaDetailParameter);
        }
    
        public virtual ObjectResult<spg_DischargeDetailResume_Result> spg_DischargeDetailResume(Nullable<int> idFileDetail)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DischargeDetailResume_Result>("spg_DischargeDetailResume", idFileDetailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spg_DischargeDetailResumeCounter(Nullable<int> idFileDetail)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spg_DischargeDetailResumeCounter", idFileDetailParameter);
        }
    
        public virtual ObjectResult<spg_DischargeParameters_Result> spg_DischargeParameters(Nullable<int> idFileDetail)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DischargeParameters_Result>("spg_DischargeParameters", idFileDetailParameter);
        }
    
        public virtual ObjectResult<spg_DischargeRawMaterial_Result> spg_DischargeRawMaterial(Nullable<int> idFileDetail, Nullable<int> idAccount, Nullable<int> idCustomer, Nullable<int> idItem, Nullable<bool> useFormula)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("IdItem", idItem) :
                new ObjectParameter("IdItem", typeof(int));
    
            var useFormulaParameter = useFormula.HasValue ?
                new ObjectParameter("UseFormula", useFormula) :
                new ObjectParameter("UseFormula", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DischargeRawMaterial_Result>("spg_DischargeRawMaterial", idFileDetailParameter, idAccountParameter, idCustomerParameter, idItemParameter, useFormulaParameter);
        }
    
        public virtual ObjectResult<spg_DischargeTransactions_Result> spg_DischargeTransactions(Nullable<int> idFileDetail, Nullable<int> idItem, Nullable<int> idAccount)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("IdItem", idItem) :
                new ObjectParameter("IdItem", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_DischargeTransactions_Result>("spg_DischargeTransactions", idFileDetailParameter, idItemParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<spg_Email_Result> spg_Email(Nullable<int> idPerson, Nullable<int> idEmailType)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idEmailTypeParameter = idEmailType.HasValue ?
                new ObjectParameter("IdEmailType", idEmailType) :
                new ObjectParameter("IdEmailType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Email_Result>("spg_Email", idPersonParameter, idEmailTypeParameter);
        }
    
        public virtual ObjectResult<spg_EmailType_Result> spg_EmailType(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_EmailType_Result>("spg_EmailType", idParameter);
        }
    
        public virtual ObjectResult<spg_Enterprise_Result> spg_Enterprise(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Enterprise_Result>("spg_Enterprise", idParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spg_Execute()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spg_Execute");
        }
    
        public virtual ObjectResult<spg_FieldsAttachedDisplay_Result> spg_FieldsAttachedDisplay(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FieldsAttachedDisplay_Result>("spg_FieldsAttachedDisplay", idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<spg_FieldsDetailDisplay_Result> spg_FieldsDetailDisplay(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FieldsDetailDisplay_Result>("spg_FieldsDetailDisplay", idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<spg_FieldsMasterDisplay_Result> spg_FieldsMasterDisplay(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FieldsMasterDisplay_Result>("spg_FieldsMasterDisplay", idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<spg_FileAttached_Result> spg_FileAttached(Nullable<int> idFileHeader)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileAttached_Result>("spg_FileAttached", idFileHeaderParameter);
        }
    
        public virtual ObjectResult<spg_FileAttachedDisplay_Result> spg_FileAttachedDisplay(Nullable<int> id, Nullable<int> idFileConfig)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idFileConfigParameter = idFileConfig.HasValue ?
                new ObjectParameter("IdFileConfig", idFileConfig) :
                new ObjectParameter("IdFileConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileAttachedDisplay_Result>("spg_FileAttachedDisplay", idParameter, idFileConfigParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spg_FileAttachedIsFieldsSeted(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spg_FileAttachedIsFieldsSeted", idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<spg_FileDetail_Result> spg_FileDetail(Nullable<int> idFileHeader)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileDetail_Result>("spg_FileDetail", idFileHeaderParameter);
        }
    
        public virtual ObjectResult<spg_FileDetailDisplay_Result> spg_FileDetailDisplay(Nullable<int> id, Nullable<int> idFileInfoConfig)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileDetailDisplay_Result>("spg_FileDetailDisplay", idParameter, idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spg_FileDetailIsFieldsSeted(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spg_FileDetailIsFieldsSeted", idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spg_FileDetailValidateToDischarge(Nullable<int> idFileDetail)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spg_FileDetailValidateToDischarge", idFileDetailParameter);
        }
    
        public virtual ObjectResult<spg_FileDetailValidationData_Result> spg_FileDetailValidationData(Nullable<int> idFileDetail)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileDetailValidationData_Result>("spg_FileDetailValidationData", idFileDetailParameter);
        }
    
        public virtual ObjectResult<spg_FileHeader_Result> spg_FileHeader(Nullable<int> idFileHeader, Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idFileInfoConfig)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileHeader_Result>("spg_FileHeader", idFileHeaderParameter, idCustomerParameter, idAccountParameter, idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<spg_FileHeaderCurrentMonth_Result> spg_FileHeaderCurrentMonth(Nullable<int> idFileHeader, Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idFileInfoConfig)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileHeaderCurrentMonth_Result>("spg_FileHeaderCurrentMonth", idFileHeaderParameter, idCustomerParameter, idAccountParameter, idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<spg_FileHeaderFiltered_Result> spg_FileHeaderFiltered(Nullable<int> idFileHeader, Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idFileInfoConfig, string idDocument, Nullable<System.DateTime> createDate, Nullable<System.DateTime> expirationDate, Nullable<System.DateTime> authorizationDate)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idDocumentParameter = idDocument != null ?
                new ObjectParameter("IdDocument", idDocument) :
                new ObjectParameter("IdDocument", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var authorizationDateParameter = authorizationDate.HasValue ?
                new ObjectParameter("AuthorizationDate", authorizationDate) :
                new ObjectParameter("AuthorizationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileHeaderFiltered_Result>("spg_FileHeaderFiltered", idFileHeaderParameter, idCustomerParameter, idAccountParameter, idFileInfoConfigParameter, idDocumentParameter, createDateParameter, expirationDateParameter, authorizationDateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spg_FileHeaderUsAttached(Nullable<int> idFileHeader)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spg_FileHeaderUsAttached", idFileHeaderParameter);
        }
    
        public virtual ObjectResult<spg_FileHeaderValidationData_Result> spg_FileHeaderValidationData(Nullable<int> idFileHeader)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileHeaderValidationData_Result>("spg_FileHeaderValidationData", idFileHeaderParameter);
        }
    
        public virtual ObjectResult<spg_FileInfo_Result> spg_FileInfo(Nullable<int> idFileInfo)
        {
            var idFileInfoParameter = idFileInfo.HasValue ?
                new ObjectParameter("IdFileInfo", idFileInfo) :
                new ObjectParameter("IdFileInfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileInfo_Result>("spg_FileInfo", idFileInfoParameter);
        }
    
        public virtual ObjectResult<spg_FileInfoConfig_Result> spg_FileInfoConfig(Nullable<int> idFileInfoConfig, Nullable<int> idFileInfo, Nullable<int> idAccount)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idFileInfoParameter = idFileInfo.HasValue ?
                new ObjectParameter("IdFileInfo", idFileInfo) :
                new ObjectParameter("IdFileInfo", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileInfoConfig_Result>("spg_FileInfoConfig", idFileInfoConfigParameter, idFileInfoParameter, idAccountParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spg_FileInfoConfigActiveValidate(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spg_FileInfoConfigActiveValidate", idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<spg_FileInfoType_Result> spg_FileInfoType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileInfoType_Result>("spg_FileInfoType");
        }
    
        public virtual ObjectResult<spg_FileMasterDisplay_Result> spg_FileMasterDisplay(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FileMasterDisplay_Result>("spg_FileMasterDisplay", idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spg_FileMasterIsFieldsSeted(Nullable<int> idFileInfoConfig)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spg_FileMasterIsFieldsSeted", idFileInfoConfigParameter);
        }
    
        public virtual ObjectResult<spg_FilItemDischargeValidate_Result> spg_FilItemDischargeValidate(Nullable<int> idFileItemDischarge)
        {
            var idFileItemDischargeParameter = idFileItemDischarge.HasValue ?
                new ObjectParameter("IdFileItemDischarge", idFileItemDischarge) :
                new ObjectParameter("IdFileItemDischarge", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FilItemDischargeValidate_Result>("spg_FilItemDischargeValidate", idFileItemDischargeParameter);
        }
    
        public virtual ObjectResult<spg_Formula_Result> spg_Formula(Nullable<int> idFormula, Nullable<int> idCustomer, Nullable<int> idMainItem)
        {
            var idFormulaParameter = idFormula.HasValue ?
                new ObjectParameter("IdFormula", idFormula) :
                new ObjectParameter("IdFormula", typeof(int));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idMainItemParameter = idMainItem.HasValue ?
                new ObjectParameter("IdMainItem", idMainItem) :
                new ObjectParameter("IdMainItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Formula_Result>("spg_Formula", idFormulaParameter, idCustomerParameter, idMainItemParameter);
        }
    
        public virtual ObjectResult<spg_FreezeDocument_Result> spg_FreezeDocument(Nullable<int> idFileHeader)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FreezeDocument_Result>("spg_FreezeDocument", idFileHeaderParameter);
        }
    
        public virtual ObjectResult<spg_FreezeRegister_Result> spg_FreezeRegister(Nullable<int> idFileDetail)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_FreezeRegister_Result>("spg_FreezeRegister", idFileDetailParameter);
        }
    
        public virtual ObjectResult<spg_Item_Result> spg_Item(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idItem, Nullable<bool> isProduct)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("IdItem", idItem) :
                new ObjectParameter("IdItem", typeof(int));
    
            var isProductParameter = isProduct.HasValue ?
                new ObjectParameter("IsProduct", isProduct) :
                new ObjectParameter("IsProduct", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Item_Result>("spg_Item", idCustomerParameter, idAccountParameter, idItemParameter, isProductParameter);
        }
    
        public virtual ObjectResult<spg_ItemFormula_Result> spg_ItemFormula(Nullable<int> idItem)
        {
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("IdItem", idItem) :
                new ObjectParameter("IdItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_ItemFormula_Result>("spg_ItemFormula", idItemParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spg_ItemGlobalStock(Nullable<int> idItem)
        {
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("IdItem", idItem) :
                new ObjectParameter("IdItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spg_ItemGlobalStock", idItemParameter);
        }
    
        public virtual ObjectResult<spg_Menu_Result> spg_Menu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Menu_Result>("spg_Menu");
        }
    
        public virtual ObjectResult<spg_MenuByUser_Result> spg_MenuByUser(string roleName, string userName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_MenuByUser_Result>("spg_MenuByUser", roleNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<spg_OpaDetail_Result> spg_OpaDetail(Nullable<int> idOpaHeader)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_OpaDetail_Result>("spg_OpaDetail", idOpaHeaderParameter);
        }
    
        public virtual ObjectResult<spg_OpaHeader_Result> spg_OpaHeader(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idOpaHeader, Nullable<int> idState, string userName)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            var idStateParameter = idState.HasValue ?
                new ObjectParameter("IdState", idState) :
                new ObjectParameter("IdState", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_OpaHeader_Result>("spg_OpaHeader", idCustomerParameter, idAccountParameter, idOpaHeaderParameter, idStateParameter, userNameParameter);
        }
    
        public virtual ObjectResult<spg_OpaResponse_Result> spg_OpaResponse(Nullable<int> idOpaDetial)
        {
            var idOpaDetialParameter = idOpaDetial.HasValue ?
                new ObjectParameter("IdOpaDetial", idOpaDetial) :
                new ObjectParameter("IdOpaDetial", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_OpaResponse_Result>("spg_OpaResponse", idOpaDetialParameter);
        }
    
        public virtual ObjectResult<spg_Parameters_Result> spg_Parameters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Parameters_Result>("spg_Parameters");
        }
    
        public virtual ObjectResult<spg_person_Result> spg_person(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_person_Result>("spg_person", idParameter);
        }
    
        public virtual ObjectResult<spg_Phone_Result> spg_Phone(Nullable<int> idPerson, Nullable<int> idPhoneType)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idPhoneTypeParameter = idPhoneType.HasValue ?
                new ObjectParameter("IdPhoneType", idPhoneType) :
                new ObjectParameter("IdPhoneType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Phone_Result>("spg_Phone", idPersonParameter, idPhoneTypeParameter);
        }
    
        public virtual ObjectResult<spg_PhoneType_Result> spg_PhoneType(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_PhoneType_Result>("spg_PhoneType", idParameter);
        }
    
        public virtual ObjectResult<spg_premission_Result> spg_premission(Nullable<int> idRole)
        {
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_premission_Result>("spg_premission", idRoleParameter);
        }
    
        public virtual ObjectResult<spg_PremissionByRole_Result> spg_PremissionByRole(Nullable<int> idRole)
        {
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_PremissionByRole_Result>("spg_PremissionByRole", idRoleParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> spg_PremissionValidate(string userName, string roleName, string premissionName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var premissionNameParameter = premissionName != null ?
                new ObjectParameter("PremissionName", premissionName) :
                new ObjectParameter("PremissionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("spg_PremissionValidate", userNameParameter, roleNameParameter, premissionNameParameter);
        }
    
        public virtual ObjectResult<spg_Priority_Result> spg_Priority()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Priority_Result>("spg_Priority");
        }
    
        public virtual ObjectResult<spg_Queue_Result> spg_Queue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Queue_Result>("spg_Queue");
        }
    
        public virtual ObjectResult<spg_QueueItems_Result> spg_QueueItems(Nullable<int> idHeader)
        {
            var idHeaderParameter = idHeader.HasValue ?
                new ObjectParameter("IdHeader", idHeader) :
                new ObjectParameter("IdHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_QueueItems_Result>("spg_QueueItems", idHeaderParameter);
        }
    
        public virtual ObjectResult<spg_Report_DischargeDetail_Result> spg_Report_DischargeDetail(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> transFlag, string headerList, string detailList)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(bool));
    
            var headerListParameter = headerList != null ?
                new ObjectParameter("HeaderList", headerList) :
                new ObjectParameter("HeaderList", typeof(string));
    
            var detailListParameter = detailList != null ?
                new ObjectParameter("DetailList", detailList) :
                new ObjectParameter("DetailList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_DischargeDetail_Result>("spg_Report_DischargeDetail", idCustomerParameter, idAccountParameter, startDateParameter, endDateParameter, transFlagParameter, headerListParameter, detailListParameter);
        }
    
        public virtual ObjectResult<spg_Report_DischargeDetail_FilteredDetail_Result> spg_Report_DischargeDetail_FilteredDetail(Nullable<bool> transFlag, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idFileHeader)
        {
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_DischargeDetail_FilteredDetail_Result>("spg_Report_DischargeDetail_FilteredDetail", transFlagParameter, startDateParameter, endDateParameter, idCustomerParameter, idAccountParameter, idFileHeaderParameter);
        }
    
        public virtual ObjectResult<spg_Report_DischargeDetail_FilteredHeader_Result> spg_Report_DischargeDetail_FilteredHeader(Nullable<bool> transFlag, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> idCustomer, Nullable<int> idAccount, string idDocument)
        {
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idDocumentParameter = idDocument != null ?
                new ObjectParameter("IdDocument", idDocument) :
                new ObjectParameter("IdDocument", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_DischargeDetail_FilteredHeader_Result>("spg_Report_DischargeDetail_FilteredHeader", transFlagParameter, startDateParameter, endDateParameter, idCustomerParameter, idAccountParameter, idDocumentParameter);
        }
    
        public virtual int spg_Report_DischargeDetail_prueba(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> transFlag, string headerList, string detailList)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(bool));
    
            var headerListParameter = headerList != null ?
                new ObjectParameter("HeaderList", headerList) :
                new ObjectParameter("HeaderList", typeof(string));
    
            var detailListParameter = detailList != null ?
                new ObjectParameter("DetailList", detailList) :
                new ObjectParameter("DetailList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spg_Report_DischargeDetail_prueba", idCustomerParameter, idAccountParameter, startDateParameter, endDateParameter, transFlagParameter, headerListParameter, detailListParameter);
        }
    
        public virtual ObjectResult<spg_Report_ExportList_Result> spg_Report_ExportList(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> transFlag)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_ExportList_Result>("spg_Report_ExportList", idCustomerParameter, idAccountParameter, startDateParameter, endDateParameter, transFlagParameter);
        }
    
        public virtual ObjectResult<spg_Report_Formula_Result> spg_Report_Formula(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idMainItem)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idMainItemParameter = idMainItem.HasValue ?
                new ObjectParameter("IdMainItem", idMainItem) :
                new ObjectParameter("IdMainItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_Formula_Result>("spg_Report_Formula", idCustomerParameter, idAccountParameter, idMainItemParameter);
        }
    
        public virtual ObjectResult<spg_Report_FrozenList_Result> spg_Report_FrozenList(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_FrozenList_Result>("spg_Report_FrozenList", idCustomerParameter, idAccountParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spg_Report_Item_Result> spg_Report_Item(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<bool> product)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_Item_Result>("spg_Report_Item", idCustomerParameter, idAccountParameter, productParameter);
        }
    
        public virtual ObjectResult<spg_Report_SwornDeclaration_One_Result> spg_Report_SwornDeclaration_One(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> transFlag, string headerList, string detailList, Nullable<bool> useFreezE)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(bool));
    
            var headerListParameter = headerList != null ?
                new ObjectParameter("HeaderList", headerList) :
                new ObjectParameter("HeaderList", typeof(string));
    
            var detailListParameter = detailList != null ?
                new ObjectParameter("DetailList", detailList) :
                new ObjectParameter("DetailList", typeof(string));
    
            var useFreezEParameter = useFreezE.HasValue ?
                new ObjectParameter("UseFreezE", useFreezE) :
                new ObjectParameter("UseFreezE", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_SwornDeclaration_One_Result>("spg_Report_SwornDeclaration_One", idCustomerParameter, idAccountParameter, startDateParameter, endDateParameter, transFlagParameter, headerListParameter, detailListParameter, useFreezEParameter);
        }
    
        public virtual ObjectResult<spg_Report_SwornDeclaration_One_FilteredDetail_Result> spg_Report_SwornDeclaration_One_FilteredDetail(Nullable<bool> transFlag, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idFileHeader)
        {
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_SwornDeclaration_One_FilteredDetail_Result>("spg_Report_SwornDeclaration_One_FilteredDetail", transFlagParameter, startDateParameter, endDateParameter, idCustomerParameter, idAccountParameter, idFileHeaderParameter);
        }
    
        public virtual ObjectResult<spg_Report_SwornDeclaration_One_FilteredHeader_Result> spg_Report_SwornDeclaration_One_FilteredHeader(Nullable<bool> transFlag, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> idCustomer, Nullable<int> idAccount, string idDocument)
        {
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idDocumentParameter = idDocument != null ?
                new ObjectParameter("IdDocument", idDocument) :
                new ObjectParameter("IdDocument", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Report_SwornDeclaration_One_FilteredHeader_Result>("spg_Report_SwornDeclaration_One_FilteredHeader", transFlagParameter, startDateParameter, endDateParameter, idCustomerParameter, idAccountParameter, idDocumentParameter);
        }
    
        public virtual ObjectResult<spg_Resolution_Result> spg_Resolution(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Resolution_Result>("spg_Resolution", idParameter);
        }
    
        public virtual ObjectResult<spg_Role_Result> spg_Role(Nullable<int> idRole)
        {
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Role_Result>("spg_Role", idRoleParameter);
        }
    
        public virtual ObjectResult<spg_RoleByUser_Result> spg_RoleByUser(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_RoleByUser_Result>("spg_RoleByUser", userNameParameter);
        }
    
        public virtual ObjectResult<spg_RoleByUserToAssign_Result> spg_RoleByUserToAssign(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_RoleByUserToAssign_Result>("spg_RoleByUserToAssign", userNameParameter);
        }
    
        public virtual ObjectResult<spg_States_Result> spg_States()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_States_Result>("spg_States");
        }
    
        public virtual ObjectResult<spg_Supplier_Result> spg_Supplier(Nullable<int> idPerson, Nullable<bool> isDestinySupplier)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var isDestinySupplierParameter = isDestinySupplier.HasValue ?
                new ObjectParameter("IsDestinySupplier", isDestinySupplier) :
                new ObjectParameter("IsDestinySupplier", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Supplier_Result>("spg_Supplier", idPersonParameter, isDestinySupplierParameter);
        }
    
        public virtual ObjectResult<spg_TransmitionData_Result> spg_TransmitionData(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<bool> useRegisterDate, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var useRegisterDateParameter = useRegisterDate.HasValue ?
                new ObjectParameter("UseRegisterDate", useRegisterDate) :
                new ObjectParameter("UseRegisterDate", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_TransmitionData_Result>("spg_TransmitionData", idCustomerParameter, idAccountParameter, useRegisterDateParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<string> spg_TransmitionData_2(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<bool> useRegisterDate, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var useRegisterDateParameter = useRegisterDate.HasValue ?
                new ObjectParameter("UseRegisterDate", useRegisterDate) :
                new ObjectParameter("UseRegisterDate", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spg_TransmitionData_2", idCustomerParameter, idAccountParameter, useRegisterDateParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spg_TransmitionDataByIds_Result> spg_TransmitionDataByIds(string idItemDischarge)
        {
            var idItemDischargeParameter = idItemDischarge != null ?
                new ObjectParameter("IdItemDischarge", idItemDischarge) :
                new ObjectParameter("IdItemDischarge", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_TransmitionDataByIds_Result>("spg_TransmitionDataByIds", idItemDischargeParameter);
        }
    
        public virtual ObjectResult<spg_TransmitionGetUserEmail_Result> spg_TransmitionGetUserEmail(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_TransmitionGetUserEmail_Result>("spg_TransmitionGetUserEmail", userNameParameter);
        }
    
        public virtual ObjectResult<spg_TransmitionResult_Result> spg_TransmitionResult(Nullable<int> idOpaHeader)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_TransmitionResult_Result>("spg_TransmitionResult", idOpaHeaderParameter);
        }
    
        public virtual ObjectResult<spg_UnitMeasurement_Result> spg_UnitMeasurement(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_UnitMeasurement_Result>("spg_UnitMeasurement", idParameter);
        }
    
        public virtual ObjectResult<spg_User_Result> spg_User(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_User_Result>("spg_User", userNameParameter);
        }
    
        public virtual ObjectResult<spg_UserProccess_Result> spg_UserProccess(Nullable<int> idOpaHeader)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_UserProccess_Result>("spg_UserProccess", idOpaHeaderParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spg_ValidatePremision(string userName, string roleName, string premissionName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var premissionNameParameter = premissionName != null ?
                new ObjectParameter("PremissionName", premissionName) :
                new ObjectParameter("PremissionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spg_ValidatePremision", userNameParameter, roleNameParameter, premissionNameParameter);
        }
    
        public virtual ObjectResult<spg_Warranty_Result> spg_Warranty(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spg_Warranty_Result>("spg_Warranty", idParameter);
        }
    
        public virtual int spi_Account(string name, string description, string registerUser)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Account", nameParameter, descriptionParameter, registerUserParameter);
        }
    
        public virtual int spi_AccountingItemAssing(Nullable<int> idResolution, Nullable<int> idAccountingItem)
        {
            var idResolutionParameter = idResolution.HasValue ?
                new ObjectParameter("IdResolution", idResolution) :
                new ObjectParameter("IdResolution", typeof(int));
    
            var idAccountingItemParameter = idAccountingItem.HasValue ?
                new ObjectParameter("IdAccountingItem", idAccountingItem) :
                new ObjectParameter("IdAccountingItem", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_AccountingItemAssing", idResolutionParameter, idAccountingItemParameter);
        }
    
        public virtual int spi_Address(string address, Nullable<int> idPerson, Nullable<int> idAddressType, string registerUser)
        {
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idAddressTypeParameter = idAddressType.HasValue ?
                new ObjectParameter("IdAddressType", idAddressType) :
                new ObjectParameter("IdAddressType", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Address", addressParameter, idPersonParameter, idAddressTypeParameter, registerUserParameter);
        }
    
        public virtual int spi_AssignRoleToPremission(Nullable<int> idRole, Nullable<int> idPremission, string registerUser)
        {
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            var idPremissionParameter = idPremission.HasValue ?
                new ObjectParameter("IdPremission", idPremission) :
                new ObjectParameter("IdPremission", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_AssignRoleToPremission", idRoleParameter, idPremissionParameter, registerUserParameter);
        }
    
        public virtual int spi_AssignUserToRole(string userName, Nullable<int> idRole, string registerUser)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var idRoleParameter = idRole.HasValue ?
                new ObjectParameter("IdRole", idRole) :
                new ObjectParameter("IdRole", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_AssignUserToRole", userNameParameter, idRoleParameter, registerUserParameter);
        }
    
        public virtual int spi_Cellar(string name, string address, string registerUser)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Cellar", nameParameter, addressParameter, registerUserParameter);
        }
    
        public virtual int spi_Country(string name, Nullable<int> idParent, string registerUser)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var idParentParameter = idParent.HasValue ?
                new ObjectParameter("IdParent", idParent) :
                new ObjectParameter("IdParent", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Country", nameParameter, idParentParameter, registerUserParameter);
        }
    
        public virtual int spi_Currency(Nullable<int> idCountry, string name, string description, string symbol, Nullable<decimal> exchangeRate, string registerUser)
        {
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Currency", idCountryParameter, nameParameter, descriptionParameter, symbolParameter, exchangeRateParameter, registerUserParameter);
        }
    
        public virtual int spi_Customer(string enterpriseName, string nit, string legalRepresentative, string personCode, string importerCode, string exporterCode, Nullable<System.DateTime> bondEndDate, string observations, string registerUser)
        {
            var enterpriseNameParameter = enterpriseName != null ?
                new ObjectParameter("EnterpriseName", enterpriseName) :
                new ObjectParameter("EnterpriseName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var legalRepresentativeParameter = legalRepresentative != null ?
                new ObjectParameter("LegalRepresentative", legalRepresentative) :
                new ObjectParameter("LegalRepresentative", typeof(string));
    
            var personCodeParameter = personCode != null ?
                new ObjectParameter("PersonCode", personCode) :
                new ObjectParameter("PersonCode", typeof(string));
    
            var importerCodeParameter = importerCode != null ?
                new ObjectParameter("ImporterCode", importerCode) :
                new ObjectParameter("ImporterCode", typeof(string));
    
            var exporterCodeParameter = exporterCode != null ?
                new ObjectParameter("ExporterCode", exporterCode) :
                new ObjectParameter("ExporterCode", typeof(string));
    
            var bondEndDateParameter = bondEndDate.HasValue ?
                new ObjectParameter("BondEndDate", bondEndDate) :
                new ObjectParameter("BondEndDate", typeof(System.DateTime));
    
            var observationsParameter = observations != null ?
                new ObjectParameter("Observations", observations) :
                new ObjectParameter("Observations", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Customer", enterpriseNameParameter, nitParameter, legalRepresentativeParameter, personCodeParameter, importerCodeParameter, exporterCodeParameter, bondEndDateParameter, observationsParameter, registerUserParameter);
        }
    
        public virtual int spi_CustomerAccount(Nullable<int> idCustomer, Nullable<int> idAccount, string registerUser)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_CustomerAccount", idCustomerParameter, idAccountParameter, registerUserParameter);
        }
    
        public virtual int spi_CustomerUser(Nullable<int> idCustomer, string userName, string registerUser)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_CustomerUser", idCustomerParameter, userNameParameter, registerUserParameter);
        }
    
        public virtual int spi_Customs(Nullable<int> idCountry, string name, string address, string code, string registerUser)
        {
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Customs", idCountryParameter, nameParameter, addressParameter, codeParameter, registerUserParameter);
        }
    
        public virtual int spi_Email(string email, Nullable<int> idPerson, Nullable<int> idEmailType, string registerUser)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idEmailTypeParameter = idEmailType.HasValue ?
                new ObjectParameter("IdEmailType", idEmailType) :
                new ObjectParameter("IdEmailType", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Email", emailParameter, idPersonParameter, idEmailTypeParameter, registerUserParameter);
        }
    
        public virtual int spi_Enterprise(string enterpiseName, string nit, ObjectParameter idPerson, string userName)
        {
            var enterpiseNameParameter = enterpiseName != null ?
                new ObjectParameter("EnterpiseName", enterpiseName) :
                new ObjectParameter("EnterpiseName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Enterprise", enterpiseNameParameter, nitParameter, idPerson, userNameParameter);
        }
    
        public virtual int spi_FileAttached(Nullable<int> idFileHeader, Nullable<int> idSupplier, string description, string attachedNumber, Nullable<System.DateTime> attachedDate, string registerUser)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            var idSupplierParameter = idSupplier.HasValue ?
                new ObjectParameter("IdSupplier", idSupplier) :
                new ObjectParameter("IdSupplier", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var attachedNumberParameter = attachedNumber != null ?
                new ObjectParameter("AttachedNumber", attachedNumber) :
                new ObjectParameter("AttachedNumber", typeof(string));
    
            var attachedDateParameter = attachedDate.HasValue ?
                new ObjectParameter("AttachedDate", attachedDate) :
                new ObjectParameter("AttachedDate", typeof(System.DateTime));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_FileAttached", idFileHeaderParameter, idSupplierParameter, descriptionParameter, attachedNumberParameter, attachedDateParameter, registerUserParameter);
        }
    
        public virtual int spi_FileAttachedDisplay(Nullable<int> idFileInfoConfig, Nullable<int> idField, string label, Nullable<bool> isUsed, Nullable<bool> isRequeried, string registerUser)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idFieldParameter = idField.HasValue ?
                new ObjectParameter("IdField", idField) :
                new ObjectParameter("IdField", typeof(int));
    
            var labelParameter = label != null ?
                new ObjectParameter("Label", label) :
                new ObjectParameter("Label", typeof(string));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(bool));
    
            var isRequeriedParameter = isRequeried.HasValue ?
                new ObjectParameter("IsRequeried", isRequeried) :
                new ObjectParameter("IsRequeried", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_FileAttachedDisplay", idFileInfoConfigParameter, idFieldParameter, labelParameter, isUsedParameter, isRequeriedParameter, registerUserParameter);
        }
    
        public virtual int spi_FileDetail(Nullable<int> idFileHeader, Nullable<int> tranLine, Nullable<int> idItem, Nullable<decimal> itemQuantity, Nullable<decimal> cIFCotQuetzal, Nullable<decimal> fOCostQuetzal, Nullable<decimal> cIFCotDollar, Nullable<decimal> fOCostDollar, Nullable<decimal> customDuties, Nullable<decimal> iva, Nullable<decimal> taxableBase, Nullable<decimal> taxRate, Nullable<decimal> netWeight, Nullable<decimal> grossWeight, string registerUser)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            var tranLineParameter = tranLine.HasValue ?
                new ObjectParameter("TranLine", tranLine) :
                new ObjectParameter("TranLine", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("IdItem", idItem) :
                new ObjectParameter("IdItem", typeof(int));
    
            var itemQuantityParameter = itemQuantity.HasValue ?
                new ObjectParameter("ItemQuantity", itemQuantity) :
                new ObjectParameter("ItemQuantity", typeof(decimal));
    
            var cIFCotQuetzalParameter = cIFCotQuetzal.HasValue ?
                new ObjectParameter("CIFCotQuetzal", cIFCotQuetzal) :
                new ObjectParameter("CIFCotQuetzal", typeof(decimal));
    
            var fOCostQuetzalParameter = fOCostQuetzal.HasValue ?
                new ObjectParameter("FOCostQuetzal", fOCostQuetzal) :
                new ObjectParameter("FOCostQuetzal", typeof(decimal));
    
            var cIFCotDollarParameter = cIFCotDollar.HasValue ?
                new ObjectParameter("CIFCotDollar", cIFCotDollar) :
                new ObjectParameter("CIFCotDollar", typeof(decimal));
    
            var fOCostDollarParameter = fOCostDollar.HasValue ?
                new ObjectParameter("FOCostDollar", fOCostDollar) :
                new ObjectParameter("FOCostDollar", typeof(decimal));
    
            var customDutiesParameter = customDuties.HasValue ?
                new ObjectParameter("CustomDuties", customDuties) :
                new ObjectParameter("CustomDuties", typeof(decimal));
    
            var ivaParameter = iva.HasValue ?
                new ObjectParameter("Iva", iva) :
                new ObjectParameter("Iva", typeof(decimal));
    
            var taxableBaseParameter = taxableBase.HasValue ?
                new ObjectParameter("TaxableBase", taxableBase) :
                new ObjectParameter("TaxableBase", typeof(decimal));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var netWeightParameter = netWeight.HasValue ?
                new ObjectParameter("NetWeight", netWeight) :
                new ObjectParameter("NetWeight", typeof(decimal));
    
            var grossWeightParameter = grossWeight.HasValue ?
                new ObjectParameter("GrossWeight", grossWeight) :
                new ObjectParameter("GrossWeight", typeof(decimal));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_FileDetail", idFileHeaderParameter, tranLineParameter, idItemParameter, itemQuantityParameter, cIFCotQuetzalParameter, fOCostQuetzalParameter, cIFCotDollarParameter, fOCostDollarParameter, customDutiesParameter, ivaParameter, taxableBaseParameter, taxRateParameter, netWeightParameter, grossWeightParameter, registerUserParameter);
        }
    
        public virtual int spi_FileDetailDisplay(Nullable<int> idFileInfoConfig, Nullable<int> idField, string label, Nullable<bool> isUsed, Nullable<bool> isRequeried, string registerUser)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idFieldParameter = idField.HasValue ?
                new ObjectParameter("IdField", idField) :
                new ObjectParameter("IdField", typeof(int));
    
            var labelParameter = label != null ?
                new ObjectParameter("Label", label) :
                new ObjectParameter("Label", typeof(string));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(bool));
    
            var isRequeriedParameter = isRequeried.HasValue ?
                new ObjectParameter("IsRequeried", isRequeried) :
                new ObjectParameter("IsRequeried", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_FileDetailDisplay", idFileInfoConfigParameter, idFieldParameter, labelParameter, isUsedParameter, isRequeriedParameter, registerUserParameter);
        }
    
        public virtual ObjectResult<spi_FileHeader_Result> spi_FileHeader(Nullable<int> idCustomer, Nullable<int> idFileInfoConfig, string idDocument, Nullable<System.DateTime> authorizationDate, Nullable<System.DateTime> expantionDate, Nullable<System.DateTime> expirationDate, Nullable<System.DateTime> arrivalDate, Nullable<System.DateTime> documentDate, Nullable<decimal> exchangeRate, Nullable<decimal> insurance, Nullable<decimal> cargo, Nullable<int> idCustom, Nullable<int> idCountry, Nullable<int> idWarranty, Nullable<int> idCellar, Nullable<int> idCurrency, Nullable<int> idResolution, Nullable<int> idAccount, Nullable<decimal> cIFTotal, Nullable<int> linesTotal, string facturas, string registerUser)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idDocumentParameter = idDocument != null ?
                new ObjectParameter("IdDocument", idDocument) :
                new ObjectParameter("IdDocument", typeof(string));
    
            var authorizationDateParameter = authorizationDate.HasValue ?
                new ObjectParameter("AuthorizationDate", authorizationDate) :
                new ObjectParameter("AuthorizationDate", typeof(System.DateTime));
    
            var expantionDateParameter = expantionDate.HasValue ?
                new ObjectParameter("ExpantionDate", expantionDate) :
                new ObjectParameter("ExpantionDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var insuranceParameter = insurance.HasValue ?
                new ObjectParameter("Insurance", insurance) :
                new ObjectParameter("Insurance", typeof(decimal));
    
            var cargoParameter = cargo.HasValue ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(decimal));
    
            var idCustomParameter = idCustom.HasValue ?
                new ObjectParameter("IdCustom", idCustom) :
                new ObjectParameter("IdCustom", typeof(int));
    
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            var idWarrantyParameter = idWarranty.HasValue ?
                new ObjectParameter("IdWarranty", idWarranty) :
                new ObjectParameter("IdWarranty", typeof(int));
    
            var idCellarParameter = idCellar.HasValue ?
                new ObjectParameter("IdCellar", idCellar) :
                new ObjectParameter("IdCellar", typeof(int));
    
            var idCurrencyParameter = idCurrency.HasValue ?
                new ObjectParameter("IdCurrency", idCurrency) :
                new ObjectParameter("IdCurrency", typeof(int));
    
            var idResolutionParameter = idResolution.HasValue ?
                new ObjectParameter("IdResolution", idResolution) :
                new ObjectParameter("IdResolution", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var cIFTotalParameter = cIFTotal.HasValue ?
                new ObjectParameter("CIFTotal", cIFTotal) :
                new ObjectParameter("CIFTotal", typeof(decimal));
    
            var linesTotalParameter = linesTotal.HasValue ?
                new ObjectParameter("LinesTotal", linesTotal) :
                new ObjectParameter("LinesTotal", typeof(int));
    
            var facturasParameter = facturas != null ?
                new ObjectParameter("Facturas", facturas) :
                new ObjectParameter("Facturas", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spi_FileHeader_Result>("spi_FileHeader", idCustomerParameter, idFileInfoConfigParameter, idDocumentParameter, authorizationDateParameter, expantionDateParameter, expirationDateParameter, arrivalDateParameter, documentDateParameter, exchangeRateParameter, insuranceParameter, cargoParameter, idCustomParameter, idCountryParameter, idWarrantyParameter, idCellarParameter, idCurrencyParameter, idResolutionParameter, idAccountParameter, cIFTotalParameter, linesTotalParameter, facturasParameter, registerUserParameter);
        }
    
        public virtual int spi_FileInfo(string name, string description, string registerUser)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_FileInfo", nameParameter, descriptionParameter, registerUserParameter);
        }
    
        public virtual int spi_FileInfoConfig(Nullable<int> idFileInfo, Nullable<int> idFileType, Nullable<int> idAccount, Nullable<bool> useAttached, Nullable<bool> isSubstract, Nullable<bool> loadRawMaterial, Nullable<bool> transmissible, Nullable<bool> useExpired, Nullable<bool> active, string registerUser)
        {
            var idFileInfoParameter = idFileInfo.HasValue ?
                new ObjectParameter("IdFileInfo", idFileInfo) :
                new ObjectParameter("IdFileInfo", typeof(int));
    
            var idFileTypeParameter = idFileType.HasValue ?
                new ObjectParameter("IdFileType", idFileType) :
                new ObjectParameter("IdFileType", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var useAttachedParameter = useAttached.HasValue ?
                new ObjectParameter("UseAttached", useAttached) :
                new ObjectParameter("UseAttached", typeof(bool));
    
            var isSubstractParameter = isSubstract.HasValue ?
                new ObjectParameter("IsSubstract", isSubstract) :
                new ObjectParameter("IsSubstract", typeof(bool));
    
            var loadRawMaterialParameter = loadRawMaterial.HasValue ?
                new ObjectParameter("LoadRawMaterial", loadRawMaterial) :
                new ObjectParameter("LoadRawMaterial", typeof(bool));
    
            var transmissibleParameter = transmissible.HasValue ?
                new ObjectParameter("Transmissible", transmissible) :
                new ObjectParameter("Transmissible", typeof(bool));
    
            var useExpiredParameter = useExpired.HasValue ?
                new ObjectParameter("UseExpired", useExpired) :
                new ObjectParameter("UseExpired", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_FileInfoConfig", idFileInfoParameter, idFileTypeParameter, idAccountParameter, useAttachedParameter, isSubstractParameter, loadRawMaterialParameter, transmissibleParameter, useExpiredParameter, activeParameter, registerUserParameter);
        }
    
        public virtual int spi_FileItemDischarge(Nullable<int> idFileDetailSubstract, Nullable<int> idFileDetailStock, Nullable<decimal> quantity, Nullable<decimal> decrease, Nullable<bool> useFormula, string registerUser)
        {
            var idFileDetailSubstractParameter = idFileDetailSubstract.HasValue ?
                new ObjectParameter("IdFileDetailSubstract", idFileDetailSubstract) :
                new ObjectParameter("IdFileDetailSubstract", typeof(int));
    
            var idFileDetailStockParameter = idFileDetailStock.HasValue ?
                new ObjectParameter("IdFileDetailStock", idFileDetailStock) :
                new ObjectParameter("IdFileDetailStock", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var decreaseParameter = decrease.HasValue ?
                new ObjectParameter("Decrease", decrease) :
                new ObjectParameter("Decrease", typeof(decimal));
    
            var useFormulaParameter = useFormula.HasValue ?
                new ObjectParameter("UseFormula", useFormula) :
                new ObjectParameter("UseFormula", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_FileItemDischarge", idFileDetailSubstractParameter, idFileDetailStockParameter, quantityParameter, decreaseParameter, useFormulaParameter, registerUserParameter);
        }
    
        public virtual int spi_FileMasterDisplay(Nullable<int> idFileInfoConfig, Nullable<int> idField, string label, Nullable<bool> isUsed, Nullable<bool> isRequeried, string registerUser)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idFieldParameter = idField.HasValue ?
                new ObjectParameter("IdField", idField) :
                new ObjectParameter("IdField", typeof(int));
    
            var labelParameter = label != null ?
                new ObjectParameter("Label", label) :
                new ObjectParameter("Label", typeof(string));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(bool));
    
            var isRequeriedParameter = isRequeried.HasValue ?
                new ObjectParameter("IsRequeried", isRequeried) :
                new ObjectParameter("IsRequeried", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_FileMasterDisplay", idFileInfoConfigParameter, idFieldParameter, labelParameter, isUsedParameter, isRequeriedParameter, registerUserParameter);
        }
    
        public virtual int spi_Formula(Nullable<int> idMainItem, Nullable<int> idDetailItem, Nullable<decimal> quantity, Nullable<decimal> decrease, Nullable<bool> active, string registerUser)
        {
            var idMainItemParameter = idMainItem.HasValue ?
                new ObjectParameter("IdMainItem", idMainItem) :
                new ObjectParameter("IdMainItem", typeof(int));
    
            var idDetailItemParameter = idDetailItem.HasValue ?
                new ObjectParameter("IdDetailItem", idDetailItem) :
                new ObjectParameter("IdDetailItem", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var decreaseParameter = decrease.HasValue ?
                new ObjectParameter("Decrease", decrease) :
                new ObjectParameter("Decrease", typeof(decimal));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Formula", idMainItemParameter, idDetailItemParameter, quantityParameter, decreaseParameter, activeParameter, registerUserParameter);
        }
    
        public virtual int spi_Item(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idUnitMeasurement, Nullable<int> idResolution, Nullable<int> idAccountingItem, string code, string name, string description, string barcode, Nullable<bool> isProduct, Nullable<bool> active, string registerUser)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idUnitMeasurementParameter = idUnitMeasurement.HasValue ?
                new ObjectParameter("IdUnitMeasurement", idUnitMeasurement) :
                new ObjectParameter("IdUnitMeasurement", typeof(int));
    
            var idResolutionParameter = idResolution.HasValue ?
                new ObjectParameter("IdResolution", idResolution) :
                new ObjectParameter("IdResolution", typeof(int));
    
            var idAccountingItemParameter = idAccountingItem.HasValue ?
                new ObjectParameter("IdAccountingItem", idAccountingItem) :
                new ObjectParameter("IdAccountingItem", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var isProductParameter = isProduct.HasValue ?
                new ObjectParameter("IsProduct", isProduct) :
                new ObjectParameter("IsProduct", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Item", idCustomerParameter, idAccountParameter, idUnitMeasurementParameter, idResolutionParameter, idAccountingItemParameter, codeParameter, nameParameter, descriptionParameter, barcodeParameter, isProductParameter, activeParameter, registerUserParameter);
        }
    
        public virtual int spi_OpaDetail(Nullable<int> idOpaHeader, Nullable<int> idFileItemDischarge, Nullable<int> idFileHeaderSubstract, Nullable<int> idFileDetailSubstract, string idDocumentSubstract, Nullable<int> transactionLineSubstract, Nullable<decimal> quantitySubstract, Nullable<decimal> cifSubstract, Nullable<decimal> fobSubstract, Nullable<decimal> customDutiesSubstract, Nullable<decimal> ivaSubstract, Nullable<int> idFileHeaderStock, Nullable<int> idFileDetailStock, string idDocumentStock, Nullable<int> transactionLineStock)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            var idFileItemDischargeParameter = idFileItemDischarge.HasValue ?
                new ObjectParameter("IdFileItemDischarge", idFileItemDischarge) :
                new ObjectParameter("IdFileItemDischarge", typeof(int));
    
            var idFileHeaderSubstractParameter = idFileHeaderSubstract.HasValue ?
                new ObjectParameter("IdFileHeaderSubstract", idFileHeaderSubstract) :
                new ObjectParameter("IdFileHeaderSubstract", typeof(int));
    
            var idFileDetailSubstractParameter = idFileDetailSubstract.HasValue ?
                new ObjectParameter("IdFileDetailSubstract", idFileDetailSubstract) :
                new ObjectParameter("IdFileDetailSubstract", typeof(int));
    
            var idDocumentSubstractParameter = idDocumentSubstract != null ?
                new ObjectParameter("IdDocumentSubstract", idDocumentSubstract) :
                new ObjectParameter("IdDocumentSubstract", typeof(string));
    
            var transactionLineSubstractParameter = transactionLineSubstract.HasValue ?
                new ObjectParameter("TransactionLineSubstract", transactionLineSubstract) :
                new ObjectParameter("TransactionLineSubstract", typeof(int));
    
            var quantitySubstractParameter = quantitySubstract.HasValue ?
                new ObjectParameter("QuantitySubstract", quantitySubstract) :
                new ObjectParameter("QuantitySubstract", typeof(decimal));
    
            var cifSubstractParameter = cifSubstract.HasValue ?
                new ObjectParameter("CifSubstract", cifSubstract) :
                new ObjectParameter("CifSubstract", typeof(decimal));
    
            var fobSubstractParameter = fobSubstract.HasValue ?
                new ObjectParameter("FobSubstract", fobSubstract) :
                new ObjectParameter("FobSubstract", typeof(decimal));
    
            var customDutiesSubstractParameter = customDutiesSubstract.HasValue ?
                new ObjectParameter("CustomDutiesSubstract", customDutiesSubstract) :
                new ObjectParameter("CustomDutiesSubstract", typeof(decimal));
    
            var ivaSubstractParameter = ivaSubstract.HasValue ?
                new ObjectParameter("IvaSubstract", ivaSubstract) :
                new ObjectParameter("IvaSubstract", typeof(decimal));
    
            var idFileHeaderStockParameter = idFileHeaderStock.HasValue ?
                new ObjectParameter("IdFileHeaderStock", idFileHeaderStock) :
                new ObjectParameter("IdFileHeaderStock", typeof(int));
    
            var idFileDetailStockParameter = idFileDetailStock.HasValue ?
                new ObjectParameter("IdFileDetailStock", idFileDetailStock) :
                new ObjectParameter("IdFileDetailStock", typeof(int));
    
            var idDocumentStockParameter = idDocumentStock != null ?
                new ObjectParameter("IdDocumentStock", idDocumentStock) :
                new ObjectParameter("IdDocumentStock", typeof(string));
    
            var transactionLineStockParameter = transactionLineStock.HasValue ?
                new ObjectParameter("TransactionLineStock", transactionLineStock) :
                new ObjectParameter("TransactionLineStock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_OpaDetail", idOpaHeaderParameter, idFileItemDischargeParameter, idFileHeaderSubstractParameter, idFileDetailSubstractParameter, idDocumentSubstractParameter, transactionLineSubstractParameter, quantitySubstractParameter, cifSubstractParameter, fobSubstractParameter, customDutiesSubstractParameter, ivaSubstractParameter, idFileHeaderStockParameter, idFileDetailStockParameter, idDocumentStockParameter, transactionLineStockParameter);
        }
    
        public virtual int spi_OpaHeader(Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idPriority, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string registerUser, ObjectParameter idOpaHeader)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idPriorityParameter = idPriority.HasValue ?
                new ObjectParameter("IdPriority", idPriority) :
                new ObjectParameter("IdPriority", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_OpaHeader", idCustomerParameter, idAccountParameter, idPriorityParameter, startDateParameter, endDateParameter, registerUserParameter, idOpaHeader);
        }
    
        public virtual int spi_Person(string firstName, string lastName, string nit, ObjectParameter idPerson, string userName)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Person", firstNameParameter, lastNameParameter, nitParameter, idPerson, userNameParameter);
        }
    
        public virtual int spi_Phone(string number, Nullable<int> idPerson, Nullable<int> idPhoneType, string registerUser)
        {
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idPhoneTypeParameter = idPhoneType.HasValue ?
                new ObjectParameter("IdPhoneType", idPhoneType) :
                new ObjectParameter("IdPhoneType", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Phone", numberParameter, idPersonParameter, idPhoneTypeParameter, registerUserParameter);
        }
    
        public virtual int spi_Resolution(Nullable<int> idCustomer, Nullable<int> idAccount, string name, string description, Nullable<System.DateTime> rateDate, string registerUser)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var rateDateParameter = rateDate.HasValue ?
                new ObjectParameter("RateDate", rateDate) :
                new ObjectParameter("RateDate", typeof(System.DateTime));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Resolution", idCustomerParameter, idAccountParameter, nameParameter, descriptionParameter, rateDateParameter, registerUserParameter);
        }
    
        public virtual int spi_role(string name, string description, string registerUser)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_role", nameParameter, descriptionParameter, registerUserParameter);
        }
    
        public virtual int spi_Supplier(string firstName, string lastName, string nit, string observations, string registerUser, Nullable<bool> isDestinySupplier)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var observationsParameter = observations != null ?
                new ObjectParameter("Observations", observations) :
                new ObjectParameter("Observations", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            var isDestinySupplierParameter = isDestinySupplier.HasValue ?
                new ObjectParameter("IsDestinySupplier", isDestinySupplier) :
                new ObjectParameter("IsDestinySupplier", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Supplier", firstNameParameter, lastNameParameter, nitParameter, observationsParameter, registerUserParameter, isDestinySupplierParameter);
        }
    
        public virtual int spi_UnitMeasurement(string name, string description, string symbol, string registerUser)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_UnitMeasurement", nameParameter, descriptionParameter, symbolParameter, registerUserParameter);
        }
    
        public virtual int spi_User(string firstName, string lastName, string nit, string userName, string sitePassword, string mobilePassword, Nullable<bool> passwordReset, Nullable<bool> oAuthSite, Nullable<bool> oAuthMobile, Nullable<bool> active, string registerUser)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var sitePasswordParameter = sitePassword != null ?
                new ObjectParameter("SitePassword", sitePassword) :
                new ObjectParameter("SitePassword", typeof(string));
    
            var mobilePasswordParameter = mobilePassword != null ?
                new ObjectParameter("MobilePassword", mobilePassword) :
                new ObjectParameter("MobilePassword", typeof(string));
    
            var passwordResetParameter = passwordReset.HasValue ?
                new ObjectParameter("PasswordReset", passwordReset) :
                new ObjectParameter("PasswordReset", typeof(bool));
    
            var oAuthSiteParameter = oAuthSite.HasValue ?
                new ObjectParameter("OAuthSite", oAuthSite) :
                new ObjectParameter("OAuthSite", typeof(bool));
    
            var oAuthMobileParameter = oAuthMobile.HasValue ?
                new ObjectParameter("OAuthMobile", oAuthMobile) :
                new ObjectParameter("OAuthMobile", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_User", firstNameParameter, lastNameParameter, nitParameter, userNameParameter, sitePasswordParameter, mobilePasswordParameter, passwordResetParameter, oAuthSiteParameter, oAuthMobileParameter, activeParameter, registerUserParameter);
        }
    
        public virtual int spi_Warranty(string name, string description, string registerUser)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spi_Warranty", nameParameter, descriptionParameter, registerUserParameter);
        }
    
        public virtual int spo_Adjustment(Nullable<int> idFileItemDischarge, Nullable<int> idFileDetailSubstract, Nullable<int> idFileDetailStock, Nullable<decimal> quantity, Nullable<decimal> decrease, Nullable<bool> useFormula, string registerUser)
        {
            var idFileItemDischargeParameter = idFileItemDischarge.HasValue ?
                new ObjectParameter("IdFileItemDischarge", idFileItemDischarge) :
                new ObjectParameter("IdFileItemDischarge", typeof(int));
    
            var idFileDetailSubstractParameter = idFileDetailSubstract.HasValue ?
                new ObjectParameter("IdFileDetailSubstract", idFileDetailSubstract) :
                new ObjectParameter("IdFileDetailSubstract", typeof(int));
    
            var idFileDetailStockParameter = idFileDetailStock.HasValue ?
                new ObjectParameter("IdFileDetailStock", idFileDetailStock) :
                new ObjectParameter("IdFileDetailStock", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var decreaseParameter = decrease.HasValue ?
                new ObjectParameter("Decrease", decrease) :
                new ObjectParameter("Decrease", typeof(decimal));
    
            var useFormulaParameter = useFormula.HasValue ?
                new ObjectParameter("UseFormula", useFormula) :
                new ObjectParameter("UseFormula", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spo_Adjustment", idFileItemDischargeParameter, idFileDetailSubstractParameter, idFileDetailStockParameter, quantityParameter, decreaseParameter, useFormulaParameter, registerUserParameter);
        }
    
        public virtual int spo_FileItemDischarge(Nullable<int> idFileDetailSubstract, Nullable<int> idFileDetailStock, Nullable<decimal> quantity, Nullable<decimal> decrease, Nullable<bool> useFormula, string registerUser)
        {
            var idFileDetailSubstractParameter = idFileDetailSubstract.HasValue ?
                new ObjectParameter("IdFileDetailSubstract", idFileDetailSubstract) :
                new ObjectParameter("IdFileDetailSubstract", typeof(int));
    
            var idFileDetailStockParameter = idFileDetailStock.HasValue ?
                new ObjectParameter("IdFileDetailStock", idFileDetailStock) :
                new ObjectParameter("IdFileDetailStock", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var decreaseParameter = decrease.HasValue ?
                new ObjectParameter("Decrease", decrease) :
                new ObjectParameter("Decrease", typeof(decimal));
    
            var useFormulaParameter = useFormula.HasValue ?
                new ObjectParameter("UseFormula", useFormula) :
                new ObjectParameter("UseFormula", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spo_FileItemDischarge", idFileDetailSubstractParameter, idFileDetailStockParameter, quantityParameter, decreaseParameter, useFormulaParameter, registerUserParameter);
        }
    
        public virtual int spo_OpaResponse(Nullable<int> idOpaDetail, Nullable<int> transactionNumber, string errorType, string errorMessage, Nullable<decimal> cif, Nullable<decimal> customDuties, Nullable<decimal> iva, string nationalizationMulct, Nullable<decimal> nationalizationMulctAmmount, string extemporaneusMulct, Nullable<decimal> extemporaneusMulctAmmount, Nullable<System.DateTime> responseDate)
        {
            var idOpaDetailParameter = idOpaDetail.HasValue ?
                new ObjectParameter("IdOpaDetail", idOpaDetail) :
                new ObjectParameter("IdOpaDetail", typeof(int));
    
            var transactionNumberParameter = transactionNumber.HasValue ?
                new ObjectParameter("TransactionNumber", transactionNumber) :
                new ObjectParameter("TransactionNumber", typeof(int));
    
            var errorTypeParameter = errorType != null ?
                new ObjectParameter("ErrorType", errorType) :
                new ObjectParameter("ErrorType", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var cifParameter = cif.HasValue ?
                new ObjectParameter("Cif", cif) :
                new ObjectParameter("Cif", typeof(decimal));
    
            var customDutiesParameter = customDuties.HasValue ?
                new ObjectParameter("CustomDuties", customDuties) :
                new ObjectParameter("CustomDuties", typeof(decimal));
    
            var ivaParameter = iva.HasValue ?
                new ObjectParameter("Iva", iva) :
                new ObjectParameter("Iva", typeof(decimal));
    
            var nationalizationMulctParameter = nationalizationMulct != null ?
                new ObjectParameter("NationalizationMulct", nationalizationMulct) :
                new ObjectParameter("NationalizationMulct", typeof(string));
    
            var nationalizationMulctAmmountParameter = nationalizationMulctAmmount.HasValue ?
                new ObjectParameter("NationalizationMulctAmmount", nationalizationMulctAmmount) :
                new ObjectParameter("NationalizationMulctAmmount", typeof(decimal));
    
            var extemporaneusMulctParameter = extemporaneusMulct != null ?
                new ObjectParameter("ExtemporaneusMulct", extemporaneusMulct) :
                new ObjectParameter("ExtemporaneusMulct", typeof(string));
    
            var extemporaneusMulctAmmountParameter = extemporaneusMulctAmmount.HasValue ?
                new ObjectParameter("ExtemporaneusMulctAmmount", extemporaneusMulctAmmount) :
                new ObjectParameter("ExtemporaneusMulctAmmount", typeof(decimal));
    
            var responseDateParameter = responseDate.HasValue ?
                new ObjectParameter("ResponseDate", responseDate) :
                new ObjectParameter("ResponseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spo_OpaResponse", idOpaDetailParameter, transactionNumberParameter, errorTypeParameter, errorMessageParameter, cifParameter, customDutiesParameter, ivaParameter, nationalizationMulctParameter, nationalizationMulctAmmountParameter, extemporaneusMulctParameter, extemporaneusMulctAmmountParameter, responseDateParameter);
        }
    
        public virtual int spo_QueueToLog(Nullable<int> idOpaHeader)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spo_QueueToLog", idOpaHeaderParameter);
        }
    
        public virtual int spu_Account(Nullable<int> id, string name, string description, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Account", idParameter, nameParameter, descriptionParameter, registerUserParameter);
        }
    
        public virtual int spu_Address(Nullable<int> id, string address, Nullable<int> idPerson, Nullable<int> idAddressType, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idAddressTypeParameter = idAddressType.HasValue ?
                new ObjectParameter("IdAddressType", idAddressType) :
                new ObjectParameter("IdAddressType", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Address", idParameter, addressParameter, idPersonParameter, idAddressTypeParameter, registerUserParameter);
        }
    
        public virtual int spu_Adjustment(Nullable<int> idFileItemDischarge, Nullable<int> idFileDetailSubstract, Nullable<int> idFileDetailStock, Nullable<decimal> quantity, Nullable<decimal> decrease, Nullable<bool> useFormula, string registerUser)
        {
            var idFileItemDischargeParameter = idFileItemDischarge.HasValue ?
                new ObjectParameter("IdFileItemDischarge", idFileItemDischarge) :
                new ObjectParameter("IdFileItemDischarge", typeof(int));
    
            var idFileDetailSubstractParameter = idFileDetailSubstract.HasValue ?
                new ObjectParameter("IdFileDetailSubstract", idFileDetailSubstract) :
                new ObjectParameter("IdFileDetailSubstract", typeof(int));
    
            var idFileDetailStockParameter = idFileDetailStock.HasValue ?
                new ObjectParameter("IdFileDetailStock", idFileDetailStock) :
                new ObjectParameter("IdFileDetailStock", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var decreaseParameter = decrease.HasValue ?
                new ObjectParameter("Decrease", decrease) :
                new ObjectParameter("Decrease", typeof(decimal));
    
            var useFormulaParameter = useFormula.HasValue ?
                new ObjectParameter("UseFormula", useFormula) :
                new ObjectParameter("UseFormula", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Adjustment", idFileItemDischargeParameter, idFileDetailSubstractParameter, idFileDetailStockParameter, quantityParameter, decreaseParameter, useFormulaParameter, registerUserParameter);
        }
    
        public virtual int spu_BatchToProccess(Nullable<int> idOpaHeader)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_BatchToProccess", idOpaHeaderParameter);
        }
    
        public virtual int spu_Cellar(Nullable<int> idCellar, string name, string address, string registerUser)
        {
            var idCellarParameter = idCellar.HasValue ?
                new ObjectParameter("IdCellar", idCellar) :
                new ObjectParameter("IdCellar", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Cellar", idCellarParameter, nameParameter, addressParameter, registerUserParameter);
        }
    
        public virtual int spu_Country(Nullable<int> idCountry, string name, Nullable<int> idParent, string registerUser)
        {
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var idParentParameter = idParent.HasValue ?
                new ObjectParameter("IdParent", idParent) :
                new ObjectParameter("IdParent", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Country", idCountryParameter, nameParameter, idParentParameter, registerUserParameter);
        }
    
        public virtual int spu_Currency(Nullable<int> id, Nullable<int> idCountry, string name, string description, string symbol, Nullable<decimal> exchangeRate, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Currency", idParameter, idCountryParameter, nameParameter, descriptionParameter, symbolParameter, exchangeRateParameter, registerUserParameter);
        }
    
        public virtual int spu_Customer(Nullable<int> idPerson, string enterpriseName, string nit, string legalRepresentative, string personCode, string importerCode, string exporterCode, Nullable<System.DateTime> bondEndDate, string observations, string registerUser)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var enterpriseNameParameter = enterpriseName != null ?
                new ObjectParameter("EnterpriseName", enterpriseName) :
                new ObjectParameter("EnterpriseName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var legalRepresentativeParameter = legalRepresentative != null ?
                new ObjectParameter("LegalRepresentative", legalRepresentative) :
                new ObjectParameter("LegalRepresentative", typeof(string));
    
            var personCodeParameter = personCode != null ?
                new ObjectParameter("PersonCode", personCode) :
                new ObjectParameter("PersonCode", typeof(string));
    
            var importerCodeParameter = importerCode != null ?
                new ObjectParameter("ImporterCode", importerCode) :
                new ObjectParameter("ImporterCode", typeof(string));
    
            var exporterCodeParameter = exporterCode != null ?
                new ObjectParameter("ExporterCode", exporterCode) :
                new ObjectParameter("ExporterCode", typeof(string));
    
            var bondEndDateParameter = bondEndDate.HasValue ?
                new ObjectParameter("BondEndDate", bondEndDate) :
                new ObjectParameter("BondEndDate", typeof(System.DateTime));
    
            var observationsParameter = observations != null ?
                new ObjectParameter("Observations", observations) :
                new ObjectParameter("Observations", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Customer", idPersonParameter, enterpriseNameParameter, nitParameter, legalRepresentativeParameter, personCodeParameter, importerCodeParameter, exporterCodeParameter, bondEndDateParameter, observationsParameter, registerUserParameter);
        }
    
        public virtual int spu_CustomerAccountData(Nullable<int> idCustomer, Nullable<int> idAccount, string resolutionRate, string regimeRate, Nullable<System.DateTime> resolutionStartDate, Nullable<System.DateTime> resolutionEndDate, Nullable<System.DateTime> fiscalPeriodStartDate, Nullable<System.DateTime> fiscalPeriodEndDate)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var resolutionRateParameter = resolutionRate != null ?
                new ObjectParameter("ResolutionRate", resolutionRate) :
                new ObjectParameter("ResolutionRate", typeof(string));
    
            var regimeRateParameter = regimeRate != null ?
                new ObjectParameter("RegimeRate", regimeRate) :
                new ObjectParameter("RegimeRate", typeof(string));
    
            var resolutionStartDateParameter = resolutionStartDate.HasValue ?
                new ObjectParameter("ResolutionStartDate", resolutionStartDate) :
                new ObjectParameter("ResolutionStartDate", typeof(System.DateTime));
    
            var resolutionEndDateParameter = resolutionEndDate.HasValue ?
                new ObjectParameter("ResolutionEndDate", resolutionEndDate) :
                new ObjectParameter("ResolutionEndDate", typeof(System.DateTime));
    
            var fiscalPeriodStartDateParameter = fiscalPeriodStartDate.HasValue ?
                new ObjectParameter("FiscalPeriodStartDate", fiscalPeriodStartDate) :
                new ObjectParameter("FiscalPeriodStartDate", typeof(System.DateTime));
    
            var fiscalPeriodEndDateParameter = fiscalPeriodEndDate.HasValue ?
                new ObjectParameter("FiscalPeriodEndDate", fiscalPeriodEndDate) :
                new ObjectParameter("FiscalPeriodEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_CustomerAccountData", idCustomerParameter, idAccountParameter, resolutionRateParameter, regimeRateParameter, resolutionStartDateParameter, resolutionEndDateParameter, fiscalPeriodStartDateParameter, fiscalPeriodEndDateParameter);
        }
    
        public virtual int spu_CustomerUser(Nullable<int> idCustomer, string userName, string registerUser)
        {
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_CustomerUser", idCustomerParameter, userNameParameter, registerUserParameter);
        }
    
        public virtual int spu_Customs(Nullable<int> idCustom, Nullable<int> idCountry, string name, string address, string code, string registerUser)
        {
            var idCustomParameter = idCustom.HasValue ?
                new ObjectParameter("IdCustom", idCustom) :
                new ObjectParameter("IdCustom", typeof(int));
    
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Customs", idCustomParameter, idCountryParameter, nameParameter, addressParameter, codeParameter, registerUserParameter);
        }
    
        public virtual int spu_DocumentChangeState(Nullable<int> idOpaHeader, Nullable<int> idState)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            var idStateParameter = idState.HasValue ?
                new ObjectParameter("IdState", idState) :
                new ObjectParameter("IdState", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_DocumentChangeState", idOpaHeaderParameter, idStateParameter);
        }
    
        public virtual int spu_DocumentStartEndProccessTime(Nullable<int> idOpaHeader, Nullable<bool> isStartProc)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            var isStartProcParameter = isStartProc.HasValue ?
                new ObjectParameter("IsStartProc", isStartProc) :
                new ObjectParameter("IsStartProc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_DocumentStartEndProccessTime", idOpaHeaderParameter, isStartProcParameter);
        }
    
        public virtual int spu_Email(Nullable<int> id, string email, Nullable<int> idPerson, Nullable<int> idPhoneType, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idPhoneTypeParameter = idPhoneType.HasValue ?
                new ObjectParameter("IdPhoneType", idPhoneType) :
                new ObjectParameter("IdPhoneType", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Email", idParameter, emailParameter, idPersonParameter, idPhoneTypeParameter, registerUserParameter);
        }
    
        public virtual int spu_Enterprise(Nullable<int> id, string enterpriseName, string nit, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var enterpriseNameParameter = enterpriseName != null ?
                new ObjectParameter("EnterpriseName", enterpriseName) :
                new ObjectParameter("EnterpriseName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Enterprise", idParameter, enterpriseNameParameter, nitParameter, registerUserParameter);
        }
    
        public virtual int spu_FileAttached(Nullable<int> idFileAttached, Nullable<int> idFileHeader, Nullable<int> idSupplier, string description, string attachedNumber, Nullable<System.DateTime> attachedDate, string registerUser)
        {
            var idFileAttachedParameter = idFileAttached.HasValue ?
                new ObjectParameter("IdFileAttached", idFileAttached) :
                new ObjectParameter("IdFileAttached", typeof(int));
    
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            var idSupplierParameter = idSupplier.HasValue ?
                new ObjectParameter("IdSupplier", idSupplier) :
                new ObjectParameter("IdSupplier", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var attachedNumberParameter = attachedNumber != null ?
                new ObjectParameter("AttachedNumber", attachedNumber) :
                new ObjectParameter("AttachedNumber", typeof(string));
    
            var attachedDateParameter = attachedDate.HasValue ?
                new ObjectParameter("AttachedDate", attachedDate) :
                new ObjectParameter("AttachedDate", typeof(System.DateTime));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FileAttached", idFileAttachedParameter, idFileHeaderParameter, idSupplierParameter, descriptionParameter, attachedNumberParameter, attachedDateParameter, registerUserParameter);
        }
    
        public virtual int spu_FileAttachedDisplay(Nullable<int> id, Nullable<int> idFileInfoConfig, Nullable<int> idField, string label, Nullable<bool> isUsed, Nullable<bool> isRequeried, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idFieldParameter = idField.HasValue ?
                new ObjectParameter("IdField", idField) :
                new ObjectParameter("IdField", typeof(int));
    
            var labelParameter = label != null ?
                new ObjectParameter("Label", label) :
                new ObjectParameter("Label", typeof(string));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(bool));
    
            var isRequeriedParameter = isRequeried.HasValue ?
                new ObjectParameter("IsRequeried", isRequeried) :
                new ObjectParameter("IsRequeried", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FileAttachedDisplay", idParameter, idFileInfoConfigParameter, idFieldParameter, labelParameter, isUsedParameter, isRequeriedParameter, registerUserParameter);
        }
    
        public virtual int spu_FileDetail(Nullable<int> idFileDetail, Nullable<int> idFileHeader, Nullable<int> tranLine, Nullable<int> idItem, Nullable<decimal> itemQuantity, Nullable<decimal> cIFCotQuetzal, Nullable<decimal> fOCostQuetzal, Nullable<decimal> cIFCotDollar, Nullable<decimal> fOCostDollar, Nullable<decimal> customDuties, Nullable<decimal> iva, Nullable<decimal> taxableBase, Nullable<decimal> taxRate, Nullable<decimal> netWeight, Nullable<decimal> grossWeight, string registerUser)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            var tranLineParameter = tranLine.HasValue ?
                new ObjectParameter("TranLine", tranLine) :
                new ObjectParameter("TranLine", typeof(int));
    
            var idItemParameter = idItem.HasValue ?
                new ObjectParameter("IdItem", idItem) :
                new ObjectParameter("IdItem", typeof(int));
    
            var itemQuantityParameter = itemQuantity.HasValue ?
                new ObjectParameter("ItemQuantity", itemQuantity) :
                new ObjectParameter("ItemQuantity", typeof(decimal));
    
            var cIFCotQuetzalParameter = cIFCotQuetzal.HasValue ?
                new ObjectParameter("CIFCotQuetzal", cIFCotQuetzal) :
                new ObjectParameter("CIFCotQuetzal", typeof(decimal));
    
            var fOCostQuetzalParameter = fOCostQuetzal.HasValue ?
                new ObjectParameter("FOCostQuetzal", fOCostQuetzal) :
                new ObjectParameter("FOCostQuetzal", typeof(decimal));
    
            var cIFCotDollarParameter = cIFCotDollar.HasValue ?
                new ObjectParameter("CIFCotDollar", cIFCotDollar) :
                new ObjectParameter("CIFCotDollar", typeof(decimal));
    
            var fOCostDollarParameter = fOCostDollar.HasValue ?
                new ObjectParameter("FOCostDollar", fOCostDollar) :
                new ObjectParameter("FOCostDollar", typeof(decimal));
    
            var customDutiesParameter = customDuties.HasValue ?
                new ObjectParameter("CustomDuties", customDuties) :
                new ObjectParameter("CustomDuties", typeof(decimal));
    
            var ivaParameter = iva.HasValue ?
                new ObjectParameter("Iva", iva) :
                new ObjectParameter("Iva", typeof(decimal));
    
            var taxableBaseParameter = taxableBase.HasValue ?
                new ObjectParameter("TaxableBase", taxableBase) :
                new ObjectParameter("TaxableBase", typeof(decimal));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var netWeightParameter = netWeight.HasValue ?
                new ObjectParameter("NetWeight", netWeight) :
                new ObjectParameter("NetWeight", typeof(decimal));
    
            var grossWeightParameter = grossWeight.HasValue ?
                new ObjectParameter("GrossWeight", grossWeight) :
                new ObjectParameter("GrossWeight", typeof(decimal));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FileDetail", idFileDetailParameter, idFileHeaderParameter, tranLineParameter, idItemParameter, itemQuantityParameter, cIFCotQuetzalParameter, fOCostQuetzalParameter, cIFCotDollarParameter, fOCostDollarParameter, customDutiesParameter, ivaParameter, taxableBaseParameter, taxRateParameter, netWeightParameter, grossWeightParameter, registerUserParameter);
        }
    
        public virtual int spu_FileDetailDisplay(Nullable<int> id, Nullable<int> idFileInfoConfig, Nullable<int> idField, string label, Nullable<bool> isUsed, Nullable<bool> isRequeried, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idFieldParameter = idField.HasValue ?
                new ObjectParameter("IdField", idField) :
                new ObjectParameter("IdField", typeof(int));
    
            var labelParameter = label != null ?
                new ObjectParameter("Label", label) :
                new ObjectParameter("Label", typeof(string));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(bool));
    
            var isRequeriedParameter = isRequeried.HasValue ?
                new ObjectParameter("IsRequeried", isRequeried) :
                new ObjectParameter("IsRequeried", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FileDetailDisplay", idParameter, idFileInfoConfigParameter, idFieldParameter, labelParameter, isUsedParameter, isRequeriedParameter, registerUserParameter);
        }
    
        public virtual ObjectResult<spu_FileHeader_Result> spu_FileHeader(Nullable<int> id, Nullable<int> idCustomer, Nullable<int> idFileInfoConfig, string idDocument, Nullable<System.DateTime> authorizationDate, Nullable<System.DateTime> expantionDate, Nullable<System.DateTime> expirationDate, Nullable<System.DateTime> documentDate, Nullable<System.DateTime> arrivalDate, Nullable<decimal> exchangeRate, Nullable<decimal> insurance, Nullable<decimal> cargo, Nullable<int> idCustom, Nullable<int> idCountry, Nullable<int> idWarranty, Nullable<int> idCellar, Nullable<int> idCurrency, Nullable<int> idResolution, Nullable<int> idAccount, Nullable<decimal> cIFTotal, Nullable<int> linesTotal, string facturas, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idDocumentParameter = idDocument != null ?
                new ObjectParameter("IdDocument", idDocument) :
                new ObjectParameter("IdDocument", typeof(string));
    
            var authorizationDateParameter = authorizationDate.HasValue ?
                new ObjectParameter("AuthorizationDate", authorizationDate) :
                new ObjectParameter("AuthorizationDate", typeof(System.DateTime));
    
            var expantionDateParameter = expantionDate.HasValue ?
                new ObjectParameter("ExpantionDate", expantionDate) :
                new ObjectParameter("ExpantionDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var exchangeRateParameter = exchangeRate.HasValue ?
                new ObjectParameter("ExchangeRate", exchangeRate) :
                new ObjectParameter("ExchangeRate", typeof(decimal));
    
            var insuranceParameter = insurance.HasValue ?
                new ObjectParameter("Insurance", insurance) :
                new ObjectParameter("Insurance", typeof(decimal));
    
            var cargoParameter = cargo.HasValue ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(decimal));
    
            var idCustomParameter = idCustom.HasValue ?
                new ObjectParameter("IdCustom", idCustom) :
                new ObjectParameter("IdCustom", typeof(int));
    
            var idCountryParameter = idCountry.HasValue ?
                new ObjectParameter("IdCountry", idCountry) :
                new ObjectParameter("IdCountry", typeof(int));
    
            var idWarrantyParameter = idWarranty.HasValue ?
                new ObjectParameter("IdWarranty", idWarranty) :
                new ObjectParameter("IdWarranty", typeof(int));
    
            var idCellarParameter = idCellar.HasValue ?
                new ObjectParameter("IdCellar", idCellar) :
                new ObjectParameter("IdCellar", typeof(int));
    
            var idCurrencyParameter = idCurrency.HasValue ?
                new ObjectParameter("IdCurrency", idCurrency) :
                new ObjectParameter("IdCurrency", typeof(int));
    
            var idResolutionParameter = idResolution.HasValue ?
                new ObjectParameter("IdResolution", idResolution) :
                new ObjectParameter("IdResolution", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var cIFTotalParameter = cIFTotal.HasValue ?
                new ObjectParameter("CIFTotal", cIFTotal) :
                new ObjectParameter("CIFTotal", typeof(decimal));
    
            var linesTotalParameter = linesTotal.HasValue ?
                new ObjectParameter("LinesTotal", linesTotal) :
                new ObjectParameter("LinesTotal", typeof(int));
    
            var facturasParameter = facturas != null ?
                new ObjectParameter("Facturas", facturas) :
                new ObjectParameter("Facturas", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spu_FileHeader_Result>("spu_FileHeader", idParameter, idCustomerParameter, idFileInfoConfigParameter, idDocumentParameter, authorizationDateParameter, expantionDateParameter, expirationDateParameter, documentDateParameter, arrivalDateParameter, exchangeRateParameter, insuranceParameter, cargoParameter, idCustomParameter, idCountryParameter, idWarrantyParameter, idCellarParameter, idCurrencyParameter, idResolutionParameter, idAccountParameter, cIFTotalParameter, linesTotalParameter, facturasParameter, registerUserParameter);
        }
    
        public virtual int spu_FileInfo(Nullable<int> idFileInfo, string name, string description, string registerUser)
        {
            var idFileInfoParameter = idFileInfo.HasValue ?
                new ObjectParameter("IdFileInfo", idFileInfo) :
                new ObjectParameter("IdFileInfo", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FileInfo", idFileInfoParameter, nameParameter, descriptionParameter, registerUserParameter);
        }
    
        public virtual int spu_FileInfoConfig(Nullable<int> idFileInfoConfig, Nullable<int> idFileInfo, Nullable<int> idFileType, Nullable<int> idAccount, Nullable<bool> useAttached, Nullable<bool> isSubstract, Nullable<bool> loadRawMaterial, Nullable<bool> transmissible, Nullable<bool> useExpired, Nullable<bool> active, string registerUser)
        {
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idFileInfoParameter = idFileInfo.HasValue ?
                new ObjectParameter("IdFileInfo", idFileInfo) :
                new ObjectParameter("IdFileInfo", typeof(int));
    
            var idFileTypeParameter = idFileType.HasValue ?
                new ObjectParameter("IdFileType", idFileType) :
                new ObjectParameter("IdFileType", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var useAttachedParameter = useAttached.HasValue ?
                new ObjectParameter("UseAttached", useAttached) :
                new ObjectParameter("UseAttached", typeof(bool));
    
            var isSubstractParameter = isSubstract.HasValue ?
                new ObjectParameter("IsSubstract", isSubstract) :
                new ObjectParameter("IsSubstract", typeof(bool));
    
            var loadRawMaterialParameter = loadRawMaterial.HasValue ?
                new ObjectParameter("LoadRawMaterial", loadRawMaterial) :
                new ObjectParameter("LoadRawMaterial", typeof(bool));
    
            var transmissibleParameter = transmissible.HasValue ?
                new ObjectParameter("Transmissible", transmissible) :
                new ObjectParameter("Transmissible", typeof(bool));
    
            var useExpiredParameter = useExpired.HasValue ?
                new ObjectParameter("UseExpired", useExpired) :
                new ObjectParameter("UseExpired", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FileInfoConfig", idFileInfoConfigParameter, idFileInfoParameter, idFileTypeParameter, idAccountParameter, useAttachedParameter, isSubstractParameter, loadRawMaterialParameter, transmissibleParameter, useExpiredParameter, activeParameter, registerUserParameter);
        }
    
        public virtual int spu_FileItemDischarge(Nullable<int> idFileDetailSubstract, Nullable<int> idFileDetailStock, Nullable<decimal> quantity, Nullable<decimal> decrease, Nullable<bool> useFormula, string registerUser)
        {
            var idFileDetailSubstractParameter = idFileDetailSubstract.HasValue ?
                new ObjectParameter("IdFileDetailSubstract", idFileDetailSubstract) :
                new ObjectParameter("IdFileDetailSubstract", typeof(int));
    
            var idFileDetailStockParameter = idFileDetailStock.HasValue ?
                new ObjectParameter("IdFileDetailStock", idFileDetailStock) :
                new ObjectParameter("IdFileDetailStock", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var decreaseParameter = decrease.HasValue ?
                new ObjectParameter("Decrease", decrease) :
                new ObjectParameter("Decrease", typeof(decimal));
    
            var useFormulaParameter = useFormula.HasValue ?
                new ObjectParameter("UseFormula", useFormula) :
                new ObjectParameter("UseFormula", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FileItemDischarge", idFileDetailSubstractParameter, idFileDetailStockParameter, quantityParameter, decreaseParameter, useFormulaParameter, registerUserParameter);
        }
    
        public virtual int spu_FileMasterDisplay(Nullable<int> id, Nullable<int> idFileInfoConfig, Nullable<int> idField, string label, Nullable<bool> isUsed, Nullable<bool> isRequeried, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idFileInfoConfigParameter = idFileInfoConfig.HasValue ?
                new ObjectParameter("IdFileInfoConfig", idFileInfoConfig) :
                new ObjectParameter("IdFileInfoConfig", typeof(int));
    
            var idFieldParameter = idField.HasValue ?
                new ObjectParameter("IdField", idField) :
                new ObjectParameter("IdField", typeof(int));
    
            var labelParameter = label != null ?
                new ObjectParameter("Label", label) :
                new ObjectParameter("Label", typeof(string));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(bool));
    
            var isRequeriedParameter = isRequeried.HasValue ?
                new ObjectParameter("IsRequeried", isRequeried) :
                new ObjectParameter("IsRequeried", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FileMasterDisplay", idParameter, idFileInfoConfigParameter, idFieldParameter, labelParameter, isUsedParameter, isRequeriedParameter, registerUserParameter);
        }
    
        public virtual int spu_Formula(Nullable<int> id, Nullable<int> idMainItem, Nullable<int> idDetailItem, Nullable<decimal> quantity, Nullable<decimal> decrease, Nullable<bool> active, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idMainItemParameter = idMainItem.HasValue ?
                new ObjectParameter("IdMainItem", idMainItem) :
                new ObjectParameter("IdMainItem", typeof(int));
    
            var idDetailItemParameter = idDetailItem.HasValue ?
                new ObjectParameter("IdDetailItem", idDetailItem) :
                new ObjectParameter("IdDetailItem", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var decreaseParameter = decrease.HasValue ?
                new ObjectParameter("Decrease", decrease) :
                new ObjectParameter("Decrease", typeof(decimal));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Formula", idParameter, idMainItemParameter, idDetailItemParameter, quantityParameter, decreaseParameter, activeParameter, registerUserParameter);
        }
    
        public virtual int spu_FreezeDocument(Nullable<int> idFileHeader)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FreezeDocument", idFileHeaderParameter);
        }
    
        public virtual int spu_FreezeRegister(Nullable<int> idFileDetail, Nullable<decimal> discharge)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            var dischargeParameter = discharge.HasValue ?
                new ObjectParameter("Discharge", discharge) :
                new ObjectParameter("Discharge", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_FreezeRegister", idFileDetailParameter, dischargeParameter);
        }
    
        public virtual int spu_Item(Nullable<int> id, Nullable<int> idCustomer, Nullable<int> idAccount, Nullable<int> idUnitMeasurement, Nullable<int> idResolution, Nullable<int> idAccountingItem, string code, string name, string description, string barcode, Nullable<bool> isProduct, Nullable<bool> active, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var idUnitMeasurementParameter = idUnitMeasurement.HasValue ?
                new ObjectParameter("IdUnitMeasurement", idUnitMeasurement) :
                new ObjectParameter("IdUnitMeasurement", typeof(int));
    
            var idResolutionParameter = idResolution.HasValue ?
                new ObjectParameter("IdResolution", idResolution) :
                new ObjectParameter("IdResolution", typeof(int));
    
            var idAccountingItemParameter = idAccountingItem.HasValue ?
                new ObjectParameter("IdAccountingItem", idAccountingItem) :
                new ObjectParameter("IdAccountingItem", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var isProductParameter = isProduct.HasValue ?
                new ObjectParameter("IsProduct", isProduct) :
                new ObjectParameter("IsProduct", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Item", idParameter, idCustomerParameter, idAccountParameter, idUnitMeasurementParameter, idResolutionParameter, idAccountingItemParameter, codeParameter, nameParameter, descriptionParameter, barcodeParameter, isProductParameter, activeParameter, registerUserParameter);
        }
    
        public virtual int spu_ItemChangeState(Nullable<int> idOpaDetail, Nullable<int> idState)
        {
            var idOpaDetailParameter = idOpaDetail.HasValue ?
                new ObjectParameter("IdOpaDetail", idOpaDetail) :
                new ObjectParameter("IdOpaDetail", typeof(int));
    
            var idStateParameter = idState.HasValue ?
                new ObjectParameter("IdState", idState) :
                new ObjectParameter("IdState", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_ItemChangeState", idOpaDetailParameter, idStateParameter);
        }
    
        public virtual int spu_ItemStartEndProccessTime(Nullable<int> idOpaDetail, Nullable<bool> isStartProc)
        {
            var idOpaDetailParameter = idOpaDetail.HasValue ?
                new ObjectParameter("IdOpaDetail", idOpaDetail) :
                new ObjectParameter("IdOpaDetail", typeof(int));
    
            var isStartProcParameter = isStartProc.HasValue ?
                new ObjectParameter("IsStartProc", isStartProc) :
                new ObjectParameter("IsStartProc", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_ItemStartEndProccessTime", idOpaDetailParameter, isStartProcParameter);
        }
    
        public virtual int spu_Person(Nullable<int> id, string firstName, string lastName, string nit, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Person", idParameter, firstNameParameter, lastNameParameter, nitParameter, registerUserParameter);
        }
    
        public virtual int spu_Phone(Nullable<int> id, string number, Nullable<int> idPerson, Nullable<int> idPhoneType, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var idPhoneTypeParameter = idPhoneType.HasValue ?
                new ObjectParameter("IdPhoneType", idPhoneType) :
                new ObjectParameter("IdPhoneType", typeof(int));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Phone", idParameter, numberParameter, idPersonParameter, idPhoneTypeParameter, registerUserParameter);
        }
    
        public virtual int spu_Resolution(Nullable<int> id, Nullable<int> idCustomer, Nullable<int> idAccount, string name, string description, Nullable<System.DateTime> rateDate, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idCustomerParameter = idCustomer.HasValue ?
                new ObjectParameter("IdCustomer", idCustomer) :
                new ObjectParameter("IdCustomer", typeof(int));
    
            var idAccountParameter = idAccount.HasValue ?
                new ObjectParameter("IdAccount", idAccount) :
                new ObjectParameter("IdAccount", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var rateDateParameter = rateDate.HasValue ?
                new ObjectParameter("RateDate", rateDate) :
                new ObjectParameter("RateDate", typeof(System.DateTime));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Resolution", idParameter, idCustomerParameter, idAccountParameter, nameParameter, descriptionParameter, rateDateParameter, registerUserParameter);
        }
    
        public virtual int spu_role(Nullable<int> id, string name, string description, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_role", idParameter, nameParameter, descriptionParameter, registerUserParameter);
        }
    
        public virtual int spu_Supplier(Nullable<int> idPerson, string firstName, string lastName, string nit, string observations, string registerUser, Nullable<bool> isDestinySupplier)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var observationsParameter = observations != null ?
                new ObjectParameter("Observations", observations) :
                new ObjectParameter("Observations", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            var isDestinySupplierParameter = isDestinySupplier.HasValue ?
                new ObjectParameter("IsDestinySupplier", isDestinySupplier) :
                new ObjectParameter("IsDestinySupplier", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Supplier", idPersonParameter, firstNameParameter, lastNameParameter, nitParameter, observationsParameter, registerUserParameter, isDestinySupplierParameter);
        }
    
        public virtual int spu_TransmitionBatchAgain(Nullable<int> idOpaHeader)
        {
            var idOpaHeaderParameter = idOpaHeader.HasValue ?
                new ObjectParameter("IdOpaHeader", idOpaHeader) :
                new ObjectParameter("IdOpaHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_TransmitionBatchAgain", idOpaHeaderParameter);
        }
    
        public virtual int spu_TransmitionQueueAgain(Nullable<int> idOpaDetail)
        {
            var idOpaDetailParameter = idOpaDetail.HasValue ?
                new ObjectParameter("IdOpaDetail", idOpaDetail) :
                new ObjectParameter("IdOpaDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_TransmitionQueueAgain", idOpaDetailParameter);
        }
    
        public virtual int spu_UnfreezeDocument(Nullable<int> idFileHeader)
        {
            var idFileHeaderParameter = idFileHeader.HasValue ?
                new ObjectParameter("IdFileHeader", idFileHeader) :
                new ObjectParameter("IdFileHeader", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_UnfreezeDocument", idFileHeaderParameter);
        }
    
        public virtual int spu_UnfreezeRegister(Nullable<int> idFileDetail)
        {
            var idFileDetailParameter = idFileDetail.HasValue ?
                new ObjectParameter("IdFileDetail", idFileDetail) :
                new ObjectParameter("IdFileDetail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_UnfreezeRegister", idFileDetailParameter);
        }
    
        public virtual int spu_UnitMeasurement(Nullable<int> id, string name, string description, string symbol, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_UnitMeasurement", idParameter, nameParameter, descriptionParameter, symbolParameter, registerUserParameter);
        }
    
        public virtual int spu_User(Nullable<int> idPerson, string firstName, string lastName, string nit, string userName, string sitePassword, string mobilePassword, Nullable<bool> passwordReset, Nullable<bool> oAuthSite, Nullable<bool> oAuthMobile, Nullable<bool> active, string registerUser)
        {
            var idPersonParameter = idPerson.HasValue ?
                new ObjectParameter("IdPerson", idPerson) :
                new ObjectParameter("IdPerson", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nitParameter = nit != null ?
                new ObjectParameter("Nit", nit) :
                new ObjectParameter("Nit", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var sitePasswordParameter = sitePassword != null ?
                new ObjectParameter("SitePassword", sitePassword) :
                new ObjectParameter("SitePassword", typeof(string));
    
            var mobilePasswordParameter = mobilePassword != null ?
                new ObjectParameter("MobilePassword", mobilePassword) :
                new ObjectParameter("MobilePassword", typeof(string));
    
            var passwordResetParameter = passwordReset.HasValue ?
                new ObjectParameter("PasswordReset", passwordReset) :
                new ObjectParameter("PasswordReset", typeof(bool));
    
            var oAuthSiteParameter = oAuthSite.HasValue ?
                new ObjectParameter("OAuthSite", oAuthSite) :
                new ObjectParameter("OAuthSite", typeof(bool));
    
            var oAuthMobileParameter = oAuthMobile.HasValue ?
                new ObjectParameter("OAuthMobile", oAuthMobile) :
                new ObjectParameter("OAuthMobile", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_User", idPersonParameter, firstNameParameter, lastNameParameter, nitParameter, userNameParameter, sitePasswordParameter, mobilePasswordParameter, passwordResetParameter, oAuthSiteParameter, oAuthMobileParameter, activeParameter, registerUserParameter);
        }
    
        public virtual int spu_UserSitePassword(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_UserSitePassword", userNameParameter, passwordParameter);
        }
    
        public virtual int spu_Warranty(Nullable<int> id, string name, string description, string registerUser)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var registerUserParameter = registerUser != null ?
                new ObjectParameter("RegisterUser", registerUser) :
                new ObjectParameter("RegisterUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spu_Warranty", idParameter, nameParameter, descriptionParameter, registerUserParameter);
        }
    }
}
